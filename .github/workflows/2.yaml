#============================================================================================
# Description: 编译Xiaomi Mi Router WR30U、CR6608及all的OpenWrt/ImmortalWrt固件
#============================================================================================

name: 编译路由器OpenWrt固件

on:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "选择固件源码分支"
        required: false
        default: "openwrt-main"
        type: choice
        options:
          - openwrt-main
          - immortalwrt-master
          - all
      device:
        description: "选择设备型号"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - xiaomi-mi-router-wr30u-stock
          - xiaomi-mi-router-wr30u-openwrt-uboot
          - xiaomi-mi-router-wr30u-112m-ubi-nmbm
          - xiaomi-mi-router-cr6608
      version:
        description: "指定固件版本（为空使用最新版）"
        required: false
        default: ""

env:
  TZ: Asia/Shanghai
  FEEDS_CONF: config/${{ inputs.source_branch }}/feeds.conf.default
  DIY_P1_SH: config/${{ inputs.source_branch }}/diy-part1.sh
  DIY_P2_SH: config/${{ inputs.source_branch }}/diy-part2.sh

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      # 步骤1：检出代码仓库
      - name: 检出代码
        uses: actions/checkout@v4

      # 步骤2：初始化编译环境
      - name: 初始化环境
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q` 2>/dev/null || true
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget
          sudo apt autoremove -y --purge
          sudo apt clean
          sudo mkdir -p /workdir
          sudo chown ${USER}:${GROUPS} /workdir
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤3：克隆源码
      - name: 克隆源码 [ ${{ inputs.source_branch }} ]
        id: codes
        working-directory: /workdir
        if: ${{ steps.init.outputs.status == 'success' && !cancelled() }}
        run: |
          if [[ "${{ inputs.source_branch }}" == "openwrt-main" ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="openwrt"
          elif [[ "${{ inputs.source_branch }}" == "immortalwrt-master" ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              TAGS_NAME="immortalwrt"
          else
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="openwrt"
          fi
          if [[ -n "${{ inputs.version }}" ]]; then
              git clone -q --single-branch --depth=1 --branch=${{ inputs.version }} ${REPO_URL} openwrt
          else
              git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
          fi
          ln -sf /workdir/openwrt ${GITHUB_WORKSPACE}/openwrt
          echo "build_tag=OpenWrt_${TAGS_NAME}_$(date +%Y.%m)" >> ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤4：加载自定义feeds
      - name: 加载自定义feeds
        run: |
          [[ -f "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
          chmod +x ${DIY_P1_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P1_SH}

      # 步骤5：更新feeds
      - name: 更新feeds
        run: cd openwrt/ && ./scripts/feeds update -a

      # 步骤6：安装feeds
      - name: 安装feeds
        run: cd openwrt/ && ./scripts/feeds install -a

      # 步骤7：加载设备配置文件
      - name: 加载设备配置文件
        run: |
          # 根据设备选择架构、配置文件和DTS文件
          case "${{ inputs.device }}" in
            "xiaomi-mi-router-wr30u-stock")
              CONFIG_FILE="target/linux/mediatek/filogic/config-6.6"
              DTS_FILE="target/linux/mediatek/dts/mt7981b-xiaomi-mi-router-wr30u-stock.dts"
              DTS_DEST="arch/arm64/boot/dts/mediatek"
              ;;
            "xiaomi-mi-router-wr30u-openwrt-uboot")
              CONFIG_FILE="target/linux/mediatek/filogic/config-6.6"
              DTS_FILE="target/linux/mediatek/dts/mt7981b-xiaomi-mi-router-wr30u-openwrt-uboot.dts"
              DTS_DEST="arch/arm64/boot/dts/mediatek"
              ;;
            "xiaomi-mi-router-wr30u-112m-ubi-nmbm")
              CONFIG_FILE="target/linux/mediatek/filogic/config-6.6"
              DTS_FILE="target/linux/mediatek/dts/mt7981b-xiaomi-mi-router-wr30u-112m-ubi-nmbm.dts"
              DTS_DEST="arch/arm64/boot/dts/mediatek"
              ;;
            "xiaomi-mi-router-cr6608")
              CONFIG_FILE="target/linux/ramips/mt7621/config-6.6"
              DTS_FILE="target/linux/ramips/dts/mt7621-xiaomi-mi-router-cr6608.dts"
              DTS_DEST="arch/mips/boot/dts"
              ;;
            "all")
              CONFIG_FILE="target/linux/mediatek/filogic/config-6.6"
              DTS_FILE=""
              DTS_DEST=""
              ;;
          esac

          # 复制配置文件
          if [[ -n "${CONFIG_FILE}" && -f "openwrt/${CONFIG_FILE}" ]]; then
            cp -f openwrt/${CONFIG_FILE} openwrt/.config
          else
            echo "错误：配置文件 openwrt/${CONFIG_FILE} 不存在"
            exit 1
          fi

          # 复制DTS文件并创建目标目录
          if [[ -n "${DTS_FILE}" && -n "${DTS_DEST}" ]]; then
            if [[ -f "openwrt/${DTS_FILE}" ]]; then
              mkdir -p openwrt/${DTS_DEST}
              cp -f openwrt/${DTS_FILE} openwrt/${DTS_DEST}/
            else
              echo "错误：DTS文件 openwrt/${DTS_FILE} 不存在"
              exit 1
            fi
          fi

          chmod +x ${DIY_P2_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P2_SH}

      # 步骤8：下载软件包
      - name: 下载软件包
        id: package
        run: |
          cd openwrt/
          make defconfig
          make download -j8
          find dl -size -1024c -exec rm -f {} \;
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤9：编译固件
      - name: 编译固件
        id: compile
        run: |
          cd openwrt/
          echo "使用$(nproc)线程编译"
          make -j$(($(nproc) + 1)) V=s || make -j1 V=s
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤10：清理并整理输出
      - name: 清理并整理输出
        id: clean
        if: ${{ steps.compile.outputs.status == 'success' && !cancelled() }}
        run: |
          cd openwrt/
          mkdir output
          cp -f bin/targets output/ 2>/dev/null || true
          cp -f .config output/config
          cd output/
          for file in *; do [[ ! -d "${file}" ]] && sha256sum "${file}" >"${file}.sha"; done
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤11：上传固件到Release
      - name: 上传固件到Release
        uses: ncipollo/release-action@v1
        if: ${{ steps.clean.outputs.status == 'success' && !cancelled() }}
        with:
          tag: ${{ steps.codes.outputs.build_tag }}
          artifacts: openwrt/output/*
          allowUpdates: true
          token: ${{ secrets.GH_TOKEN }}
