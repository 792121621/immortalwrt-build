#============================================================================================
# Description: 编译Xiaomi Mi Router WR30U和CR6608的OpenWrt/ImmortalWrt固件
#============================================================================================

name: 路由器固件编译

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "选择源码分支"
        required: false
        default: "openwrt-main"
        type: choice
        options:
          - openwrt-main
          - immortalwrt-master
          - all
      device:
        description: "选择设备型号"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - xiaomi-mi-router-wr30u-stock
          - xiaomi-mi-router-wr30u-openwrt
          - xiaomi-mi-router-wr30u-112m-nmbm
          - xiaomi-mi-router-cr6608
      version:
        description: "指定源码版本（为空则使用最新版本）"
        required: false
        default: ""

env:
  TZ: Asia/Shanghai  # 设置时区为中国

jobs:
  build:
    runs-on: ubuntu-24.04  # 使用Ubuntu 24.04 LTS编译

    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 初始化编译环境
      - name: 初始化编译环境
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
   
          # 更新软件源并安装依赖
          sudo apt update
          sudo apt install -y rar build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
          python3-setuptools rsync swig unzip zlib1g-dev file wget
          # 清理软件包缓存
          sudo apt autoremove --purge -y
          sudo apt clean
          # 创建工作目录
          sudo mkdir -p /workdir
          sudo chown ${USER}:${GROUPS} /workdir
          # 设置时区
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 克隆源码
      - name: 克隆源码
        id: codes
        working-directory: /workdir
        if: steps.init.outputs.status == 'success' && !cancelled()
        run: |
          # 根据输入选择源码
          if [[ "${{ inputs.source_branch }}" == "openwrt-main" || "${{ inputs.source_branch }}" == "all" ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="openwrt"
          elif [[ "${{ inputs.source_branch }}" == "immortalwrt-master" || "${{ inputs.source_branch }}" == "all" ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              TAGS_NAME="immortalwrt"
          else
              echo "未知的源码仓库。"
              exit 1
          fi
          # 如果指定了版本，使用指定的版本
          if [[ -n "${{ inputs.version }}" ]]; then
              REPO_BRANCH="${{ inputs.version }}"
          fi
          # 克隆源码
          git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
          ln -sf /workdir/openwrt ${GITHUB_WORKSPACE}/openwrt
          # 设置输出信息
          echo "build_tag=OpenWrt_${TAGS_NAME}_$(date +%Y.%m)" >> ${GITHUB_OUTPUT}
          echo -e "REPO_URL: [ ${REPO_URL} ]\nREPO_BRANCH: [ ${REPO_BRANCH} ]\nTAGS_NAME: [ ${TAGS_NAME} ]"
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}
      # 更新和安装feeds
      - name: 更新和安装feeds
        run: |
          cd openwrt/
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      # 加载设备配置文件
      - name: 加载设备配置文件
        run: |
          cd openwrt/
          # 根据设备选择配置文件
          case "${{ inputs.device }}" in
            "xiaomi-mi-router-wr30u-stock")
              cp target/linux/mediatek/filogic/config-6.6 .config
              echo "CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_mi-router-wr30u-stock=y" >> .config
              ;;
            "xiaomi-mi-router-wr30u-openwrt")
              cp target/linux/mediatek/filogic/config-6.6 .config
              echo "CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_mi-router-wr30u-openwrt=y" >> .config
              ;;
            "xiaomi-mi-router-wr30u-112m-nmbm")
              cp target/linux/mediatek/filogic/config-6.6 .config
              echo "CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_mi-router-wr30u-112m-nmbm=y" >> .config
              ;;
            "xiaomi-mi-router-cr6608")
              cp target/linux/ramips/mt7621/config-6.6 .config
              echo "CONFIG_TARGET_ramips_mt7621_DEVICE_xiaomi_mi-router-cr6608=y" >> .config
              ;;
            "all")
              cp target/linux/mediatek/filogic/config-6.6 .config
              cp target/linux/ramips/mt7621/config-6.6 .config
              echo "CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_mi-router-wr30u-stock=y" >> .config
              echo "CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_mi-router-wr30u-openwrt=y" >> .config
              echo "CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_mi-router-wr30u-112m-nmbm=y" >> .config
              echo "CONFIG_TARGET_ramips_mt7621_DEVICE_xiaomi_mi-router-cr6608=y" >> .config
              ;;
          esac
          make defconfig
      # 下载软件包
      - name: 下载软件包
        id: package
        run: |
          cd openwrt/
          make download -j8
          find dl -size -1024c -exec rm -f {} \;
      # 编译固件
      - name: 编译固件
        id: compile
        run: |
          cd openwrt/
          echo -e "使用$(nproc)线程编译"
          make -j$(($(nproc) + 1)) V=s || make -j1 V=s
          echo "status=success" >> ${GITHUB_OUTPUT}
      # 清理和打包输出
      - name: 清理和打包输出
        id: clean
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          cd openwrt/
          mkdir -p output
          # 复制固件到输出目录
          # cp -rf bin/targets output/
          rar a output/targets.rar bin/targets
          cp -f .config output/config
          # 生成sha256sum校验文件
          cd output/
          for file in *; do [[ ! -d "${file}" ]] && sha256sum "${file}" >"${file}.sha"; done
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}
      # 上传固件到Release
      - name: 上传固件到Release
        uses: ncipollo/release-action@v1
        if: steps.clean.outputs.status == 'success' && !cancelled()
        with:
          tag: ${{ steps.codes.outputs.build_tag }}
          artifacts: openwrt/output/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}
          body: |
            ### 固件信息
            - 默认IP: 192.168.1.1
            - 默认用户名: root
            - 默认密码: password
            - 默认WiFi名称: OpenWrt
            - 默认WiFi密码: 无
            ### 固件验证
            - 使用sha256sum校验文件
