#============================================================================================
# Description: 编译 Xiaomi Mi Router WR30U、CR6608 设备的 OpenWrt 和 ImmortalWrt 固件
#============================================================================================

name: 编译小米路由器固件——测试1

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "选择固件源码分支"
        required: false
        default: "openwrt-main"
        type: choice
        options:
          - openwrt-main
          - immortalwrt-master
          - all
      openwrt_board:
        description: "选择设备型号"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - xiaomi_wr30u-stock
          - xiaomi_wr30u-openwrt-uboot
          - xiaomi_wr30u-112m-ubi-nmbm
          - xiaomi_cr6608
      openwrt_version:
        description: "选择固件版本（为空则使用最新版本）"
        required: false
        default: ""
        type: string

env:
  FEEDS_CONF: config/${{ inputs.source_branch }}/feeds.conf.default
  CONFIG_FILE: config/${{ inputs.source_branch }}/${{ inputs.openwrt_board }}/config
  DIY_P1_SH: config/${{ inputs.source_branch }}/diy-part1.sh
  DIY_P2_SH: config/${{ inputs.source_branch }}/diy-part2.sh
  TZ: America/New_York

jobs:
  build:
    runs-on: ubuntu-24.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      # 步骤1: 检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 步骤2: 初始化编译环境
      - name: 初始化环境
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 清理 Docker 镜像和不必要的工具
          # docker rmi `docker images -q` || true
          # [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          # sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          # 更新软件源并安装依赖
          sudo apt update
          sudo apt install -y rar build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget
          sudo apt install -y rar
          # 清理 APT 缓存
          sudo apt autoremove -y --purge
          sudo apt clean
          # 创建工作目录并设置权限
          sudo mkdir -p /workdir
          sudo chown ${USER}:${GROUPS} /workdir
          # 设置时区
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤3: 克隆固件源码 待改
      - name: 克隆源码 [ ${{ inputs.source_branch }} ]
        id: codes
        working-directory: /workdir
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          # 根据输入选择源码仓库和分支
          if [[ "${{ inputs.source_branch }}" == "openwrt-main" ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="openwrt"
          elif [[ "${{ inputs.source_branch }}" == "immortalwrt-master" ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              TAGS_NAME="immortalwrt"
          elif [[ "${{ inputs.source_branch }}" == "all" ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="openwrt"
          else
              echo "未知的源码仓库"
              exit 1
          fi

          # 如果指定了版本，则使用该版本
          if [[ -n "${{ inputs.openwrt_version }}" ]]; then
              REPO_BRANCH="${{ inputs.openwrt_version }}"
          fi

          # 克隆源码
          git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
          ln -sf /workdir/openwrt ${GITHUB_WORKSPACE}/openwrt

          # 设置输出信息
          echo "build_tag=OpenWrt_${TAGS_NAME}_$(date +'%Y.%m')" >> ${GITHUB_OUTPUT}
          echo -e "REPO_URL: [ ${REPO_URL} ]\nREPO_BRANCH: [ ${REPO_BRANCH} ]\nTAGS_NAME: [ ${TAGS_NAME} ]"
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤4: 加载自定义 Feeds
      - name: 加载自定义 Feeds
        run: |
          # 检查 feeds.conf.default 是否存在
          if [[ -f "${FEEDS_CONF}" ]]; then
              cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
          else
              echo "警告: ${FEEDS_CONF} 不存在，使用默认 feeds 配置"
          fi
          # 检查 diy-part1.sh 是否存在
          if [[ -f "${DIY_P1_SH}" ]]; then
              chmod +x ${DIY_P1_SH}
              cd openwrt/
              ${GITHUB_WORKSPACE}/${DIY_P1_SH}
          else
              echo "警告: ${DIY_P1_SH} 不存在，跳过执行"
          fi

      # 步骤5: 更新 Feeds
      - name: 更新 Feeds
        run: cd openwrt/ && ./scripts/feeds update -a

      # 步骤6: 安装 Feeds
      - name: 安装 Feeds
        run: cd openwrt/ && ./scripts/feeds install -a

      # 步骤7: 加载设备配置文件 待改
      - name: 加载设备配置文件
        run: |
          # 根据设备选择架构和配置文件
          # if [[ "${{ inputs.openwrt_board }}" == "xiaomi_wr30u"* ]]; then
          #    ARCH="mediatek/filogic"
          #    CONFIG_SRC="target/linux/mediatek/filogic/config-6.6"
          # elif [[ "${{ inputs.openwrt_board }}" == "xiaomi_cr6608" ]]; then
          #    ARCH="ramips/mt7621"
          #    CONFIG_SRC="target/linux/ramips/mt7621/config-6.6"
          # else
          #    ARCH="all"
          #    CONFIG_SRC="target/linux/generic/config-6.6"
          # fi

          # 复制官方配置文件
          # cd openwrt/
          # cp "${CONFIG_SRC}" .config


          # 创建配置文件  #我增加的
          cd openwrt/  #我增加的
          touch .config  #我增加的
          mkdir -p output/测试  #我增加的
          cp -f .config output/测试/config测试1  #我增加的

          # 根据设备布局修改配置文件
          if [[ "${{ inputs.openwrt_board }}" == "xiaomi_wr30u-stock" ]]; then
              echo "CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_mi-router-wr30u-stock=y" >> .config
          elif [[ "${{ inputs.openwrt_board }}" == "xiaomi_wr30u-openwrt-uboot" ]]; then
              echo "CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_wr30u-openwrt-uboot=y" >> .config
          elif [[ "${{ inputs.openwrt_board }}" == "xiaomi_wr30u-112m-ubi-nmbm" ]]; then
              echo "CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_wr30u-112m-ubi-nmbm=y" >> .config
              echo "CONFIG_NMBM=y" >> .config
          elif [[ "${{ inputs.openwrt_board }}" == "xiaomi_cr6608" ]]; then
              echo "CONFIG_TARGET_ramips_mt7621_DEVICE_xiaomi_cr6608=y" >> .config
          fi
          cp -f .config output/测试/config测试2  #我增加的

          # 应用自定义配置
          if [[ -e "${CONFIG_FILE}" ]]; then
              cat ${CONFIG_FILE} >> .config
          else
              echo "警告: 自定义配置文件 ${CONFIG_FILE} 不存在，跳过"
          fi
          cp -f .config output/测试/config测试3 #我增加的
          # 检查 diy-part2.sh 是否存在
          if [[ -f "${DIY_P2_SH}" ]]; then
              chmod +x ${DIY_P2_SH}
              ${GITHUB_WORKSPACE}/${DIY_P2_SH}
          else
              echo "警告: ${DIY_P2_SH} 不存在，跳过执行"
          fi

      # 步骤8: 下载软件包
      - name: 下载软件包
        id: package
        run: |
          cd openwrt/
          make defconfig
          cp -f .config output/测试/config测试4  #我增加的
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      # 步骤9: 编译固件
      - name: 编译固件
        id: compile
        run: |
          cd openwrt/
          echo -e "$(nproc) 线程编译"
          make -j$(($(nproc) + 1)) V=s || make -j1 V=s
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤10: 整理输出文件
      - name: 整理输出文件
        id: clean
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        run: |
          cd openwrt/
          # mkdir output 我屏蔽的
          # 只输出 .ubi, .bin, .fip, .itb 文件
          # find bin/targets/*/* -type f \( -name "*.ubi" -o -name "*.bin  -o -name "*.bin" -o -name "*.fip" -o -name "*.itb" \) -exec cp -f {} output/ \;
          # rar a output/targets.rar bin/targets  #我修改的 输出整个bin/targets
          cp -f .config output/config
          rm -rf $(ls . | grep -v "^output$" | xargs) 2>/dev/null

          # 生成 sha256sum 文件
          cd output/
          for file in *; do [[ ! -d "${file}" ]] && sha256sum "${file}" >"${file}.sha"; done

          # 输出信息
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

          rar a output/config测试.rar output  #我增加的!!!!!!
      # 步骤11: 上传固件到 Release
      - name: 上传固件到 Release
        uses: ncipollo/release-action@v1
        if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
        with:
          tag: 编译小米路由器固件——测试1
          artifacts: openwrt/output/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}
          body: |
            ### 固件信息
            - 默认 IP: 192.168.1.1
            - 默认用户名: root
            - 默认密码: password
            - 默认 WIFI 名称: OpenWrt
            - 默认 WIFI 密码: 无
            ### 固件验证
            - sha256sum
