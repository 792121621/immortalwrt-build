#============================================================================================
# Description: Compile OpenWrt/ImmortalWrt firmware for Xiaomi WR30U and CR6608 devices
#============================================================================================

name: Compile OpenWrt Firmware

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "选择源码分支"
        required: true
        default: "openwrt-main"
        type: choice
        options:
          - openwrt-main
          - immortalwrt-master
      openwrt_board:
        description: "选择设备型号"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - xiaomi_wr30u_stock
          - xiaomi_wr30u_ubootmod
          - xiaomi_wr30u_nmbm
          - xiaomi_cr6608
      openwrt_version:
        description: "指定版本标签（留空使用最新版本）"
        required: false
        type: string

env:
  FEEDS_CONF: config/${{ inputs.source_branch }}/feeds.conf.default
  CONFIG_FILE: config/${{ inputs.source_branch }}/config
  DIY_P1_SH: config/${{ inputs.source_branch }}/diy-part1.sh
  DIY_P2_SH: config/${{ inputs.source_branch }}/diy-part2.sh
  TZ: America/New_York

jobs:
  build:
    runs-on: ubuntu-24.04
    # 限制工作流仅允许仓库所有者运行
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      # 步骤1：检出仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.head_ref || github.ref }}

      # 步骤2：初始化编译环境并安装依赖
      # - 清理Docker镜像和不必要的工具
      # - 更新软件包列表并安装指定的编译依赖
      # - 清理apt缓存，创建工作目录，设置时区
      - name: 初始化编译环境
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 清理Docker镜像
          docker rmi `docker images -q` 2>/dev/null || true
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          
          # 更新软件包并安装依赖
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget
          
          # 清理apt缓存
          sudo apt autoremove -y --purge
          sudo apt clean
          
          # 创建工作目录
          sudo mkdir -p /workdir
          sudo chown ${USER}:${GROUPS} /workdir
          
          # 设置时区
          sudo timedatectl set-timezone "${TZ}"
          
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤3：根据选择的分支克隆源码
      # - 根据输入的分支选择OpenWrt或ImmortalWrt仓库
      # - 如果指定了版本标签，则克隆指定版本，否则使用最新版本
      # - 创建符号链接并设置发布标签
      - name: 克隆源码 [ ${{ inputs.source_branch }} ]
        id: codes
        working-directory: /workdir
        if: ${{ steps.init.outputs.status == 'success' && !cancelled() }}
        run: |
          # 根据输入确定仓库和分支
          if [[ "${{ inputs.source_branch }}" == "openwrt-main" ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="openwrt"
          elif [[ "${{ inputs.source_branch }}" == "immortalwrt-master" ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              TAGS_NAME="immortalwrt"
          else
              echo "无效的源码分支选择。"
              exit 1
          fi

          # 如果指定了版本标签则使用，否则克隆最新版本
          if [[ -n "${{ inputs.openwrt_version }}" ]]; then
              git clone -q --single-branch --depth=1 --branch=${{ inputs.openwrt_version }} ${REPO_URL} openwrt
          else
              git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
          fi

          # 链接克隆的仓库到工作空间
          ln -sf /workdir/openwrt ${GITHUB_WORKSPACE}/openwrt

          # 设置发布标签
          echo "build_tag=OpenWrt_${TAGS_NAME}_$(date +%Y.%m)" >> ${GITHUB_OUTPUT}
          echo -e "REPO_URL: [ ${REPO_URL} ]\nREPO_BRANCH: [ ${REPO_BRANCH} ]\nTAGS_NAME: [ ${TAGS_NAME} ]"
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤4：加载自定义feeds配置
      # - 复制feeds配置文件（如果存在）
      # - 执行diy-part1.sh脚本进行自定义feeds设置
      - name: 加载自定义feeds
        run: |
          # 复制feeds配置
          [[ -f "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
          chmod +x ${DIY_P1_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P1_SH}

      # 步骤5：更新软件包feeds
      # - 运行feeds update命令更新所有feeds
      - name: 更新feeds
        run: |
          cd openwrt/
          ./scripts/feeds update -a

      # 步骤6：安装软件包feeds
      # - 运行feeds install命令安装所有feeds
      - name: 安装feeds
        run: |
          cd openwrt/
          ./scripts/feeds install -a

      # 步骤7：应用自定义配置
      # - 移动files目录（如果存在）
      # - 复制配置文件（如果存在）
      # - 执行diy-part2.sh脚本进行自定义配置
      - name: 加载自定义配置
        run: |
          # 移动files目录
          [[ -d "files" ]] && mv -f files openwrt/files
          # 复制配置文件
          [[ -e "${CONFIG_FILE}" ]] && cp -f ${CONFIG_FILE} openwrt/.config
          chmod +x ${DIY_P2_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P2_SH}

      # 步骤8：下载所需软件包
      # - 运行make defconfig生成默认配置
      # - 下载编译所需软件包
      # - 删除小于1KB的下载文件以节省空间
      - name: 下载软件包
        id: package
        run: |
          cd openwrt/
          make defconfig
          make download -j8
          # 删除小文件
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      # 步骤9：编译OpenWrt固件
      # - 使用多线程编译固件
      # - 如果失败，尝试单线程编译
      - name: 编译OpenWrt
        id: compile
        run: |
          cd openwrt/
          echo "使用$(nproc)线程编译"
          make -j$(($(nproc) + 1)) V=s || make -j1 || make -j1 V=s
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤10：整理输出并清理
      # - 创建输出目录，复制编译好的固件和配置文件
      # - 清理非输出文件
      # - 为输出文件生成校验和
      - name: 整理输出并清理
        id: clean
        if: ${{ steps.compile.outputs.status == 'success' && !cancelled() }}
        run: |
          cd openwrt/
          mkdir output
          # 复制固件到输出目录
          cp -f bin/targets/*/*/*rootfs.tar.gz output/
          cp -f .config output/config
          # 清理非输出文件
          rm -rf $(ls . | grep -v "^output$" | xargs) 2>/dev/null

          # 生成校验和文件
          cd output/
          for file in *; do [[ ! -d "${file}" ]] && sha256sum "${file}" >"${file}.sha"; done

          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤11：上传固件到GitHub Release
      # - 将编译好的固件和校验和文件上传到GitHub Release
      # - 包含固件信息和安装说明
      - name: 上传OpenWrt到Release
        uses: ncipollo/release-action@v1
        if: ${{ steps.clean.outputs.status == 'success' && !cancelled() }}
        with:
          tag: ${{ steps.codes.outputs.build_tag }}
          artifacts: openwrt/output/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}
          body: |
            ### OpenWrt固件信息
            - 默认IP: 192.168.1.1
            - 默认用户名: root
            - 默认密码: password
            - 默认WIFI名称: OpenWrt
            - 默认WIFI密码: 无
            ### 安装到EMMC
            - 登录OpenWrt → 系统 → Amlogic服务 → 安装OpenWrt
            ### 固件校验
            - sha256sum
