#============================================================================================
# Description: 编译Xiaomi Mi Router WR30U、CR6608及all的OpenWrt/ImmortalWrt固件
#============================================================================================

name: 编译路由器OpenWrt固件

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "选择固件源码分支"
        required: false
        default: "openwrt-main"
        type: choice
        options:
          - openwrt-main
          - immortalwrt-master
          - all
      openwrt_board:
        description: "选择设备型号"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - xiaomi-mi-router-wr30u-stock
          - xiaomi-mi-router-wr30u-openwrt
          - xiaomi-mi-router-wr30u-112m-nmbm
          - xiaomi-mi-router-cr6608
      openwrt_version:
        description: "指定版本号（如v23.05.2），为空则使用最新版本"
        required: false
        default: ""
        type: string

env:
  # 配置文件路径
  FEEDS_CONF: config/${{ inputs.source_branch }}/feeds.conf.default
  CONFIG_FILE: config/${{ inputs.source_branch }}/config
  DIY_P1_SH: config/${{ inputs.source_branch }}/diy-part1.sh
  DIY_P2_SH: config/${{ inputs.source_branch }}/diy-part2.sh
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-24.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      # 步骤1：检出代码仓库
      - name: 检出代码
        uses: actions/checkout@v4

      # 步骤2：初始化编译环境
      - name: 初始化编译环境
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 清理Docker镜像和不必要的工具
          # docker rmi `docker images -q` 2>/dev/null || true
          # [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          # sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          # 更新软件源并安装依赖
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget
          # 清理apt缓存
          sudo apt autoremove --purge -y
          sudo apt clean
          # 创建工作目录
          sudo mkdir -p /workdir
          sudo chown ${USER}:${GROUPS} /workdir
          # 设置时区
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤3：克隆源码
      - name: 克隆源码 [ ${{ inputs.source_branch }} ]
        id: codes
        working-directory: /workdir
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          # 根据输入选择源码仓库和分支
          if [[ "${{ inputs.source_branch }}" == "openwrt-main" ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="openwrt"
          elif [[ "${{ inputs.source_branch }}" == "immortalwrt-master" ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              TAGS_NAME="immortalwrt"
          elif [[ "${{ inputs.source_branch }}" == "all" ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="openwrt_all"
          else
              echo "未知源码仓库！"
              exit 1
          fi

          # 如果指定了版本号，则使用该版本
          if [[ -n "${{ inputs.openwrt_version }}" ]]; then
              REPO_BRANCH="${{ inputs.openwrt_version }}"
          fi

          # 克隆源码
          git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
          ln -sf /workdir/openwrt ${GITHUB_WORKSPACE}/openwrt

          # 设置输出信息
          echo "build_tag=OpenWrt_${TAGS_NAME}_$(date +%Y.%m)" >> ${GITHUB_OUTPUT}
          echo -e "REPO_URL: [ ${REPO_URL} ]\nREPO_BRANCH: [ ${REPO_BRANCH} ]\nTAGS_NAME: [ ${TAGS_NAME} ]"
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤4：加载自定义feeds
      - name: 加载自定义feeds
        run: |
          # 复制feeds配置文件
          [[ -f "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
          chmod +x ${DIY_P1_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P1_SH}

      # 步骤5：更新feeds
      - name: 更新feeds
        run: cd openwrt/ && ./scripts/feeds update -a

      # 步骤6：安装feeds
      - name: 安装feeds
        run: cd openwrt/ && ./scripts/feeds install -a

      # 步骤7：加载设备配置文件和DTS
      - name: 加载设备配置文件和DTS
        run: |
          # 根据设备选择架构和DTS文件
          case "${{ inputs.openwrt_board }}" in
            "xiaomi-mi-router-wr30u-stock")
              ARCH="mediatek/filogic"
              CONFIG_FILE="target/linux/mediatek/filogic/config-6.6"
              DTS_FILE="target/linux/mediatek/dts/mt7981b-xiaomi-mi-router-wr30u-stock.dts"
              ;;
            "xiaomi-mi-router-wr30u-openwrt")
              ARCH="mediatek/filogic"
              CONFIG_FILE="target/linux/mediatek/filogic/config-6.6"
              DTS_FILE="target/linux/mediatek/dts/mt7981b-xiaomi-mi-router-wr30u-openwrt.dts"
              ;;
            "xiaomi-mi-router-wr30u-112m-nmbm")
              ARCH="mediatek/filogic"
              CONFIG_FILE="target/linux/mediatek/filogic/config-6.6"
              DTS_FILE="target/linux/mediatek/dts/mt7981b-xiaomi-mi-router-wr30u-112m-nmbm.dts"
              ;;
            "xiaomi-mi-router-cr6608")
              ARCH="ramips/mt7621"
              CONFIG_FILE="target/linux/ramips/mt7621/config-6.6"
              DTS_FILE="target/linux/ramips/dts/mt7621-xiaomi-mi-router-cr6608.dts"
              ;;
            "all")
              ARCH="generic"
              CONFIG_FILE="config/${{ inputs.source_branch }}/config"
              DTS_FILE=""
              ;;
            *)
              echo "未知设备！"
              exit 1
              ;;
          esac

          # 复制配置文件
          [[ -e "${CONFIG_FILE}" ]] && cp -f ${CONFIG_FILE} openwrt/.config
          # 确保DTS文件存在（仅对具体设备）
          if [[ -n "${DTS_FILE}" && ! -f "openwrt/${DTS_FILE}" ]]; then
              echo "DTS文件 ${DTS_FILE} 不存在！"
              exit 1
          fi
          # 复制自定义文件
          [[ -d "files" ]] && mv -f files openwrt/files
          chmod +x ${DIY_P2_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P2_SH}

      # 步骤8：下载软件包
      - name: 下载软件包
        id: package
        run: |
          cd openwrt/
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      # 步骤9：编译OpenWrt固件
      - name: 编译OpenWrt固件
        id: compile
        run: |
          cd openwrt/
          echo -e "$(nproc) 线程编译"
          make -j$(($(nproc) + 1)) V=s || make -j1 || make -j1 V=s
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤10：清理服务器空间并准备输出
      - name: 清理服务器空间
        id: clean
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        run: |
          cd openwrt/
          mkdir output
          cp -f bin/targets/*/*/*.bin output/ 2>/dev/null || true
          cp -f .config output/config
          rm -rf $(ls . | grep -v "^output$" | xargs) 2>/dev/null

          # 生成sha256sum校验文件
          cd output/
          for file in *; do [[ ! -d "${file}" ]] && sha256sum "${file}" >"${file}.sha"; done

          # 输出磁盘使用情况
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤11：上传固件到Release
      - name: 上传固件到Release
        uses: ncipollo/release-action@v1
        if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
        with:
          tag: ${{ steps.codes.outputs.build_tag }}
          artifacts: openwrt/output/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}
          body: |
            ### OpenWrt固件信息
            - 默认IP: 192.168.1.1
            - 默认用户名: root
            - 默认密码: password
            - 默认WiFi名称: OpenWrt
            - 默认WiFi密码: 无
            ### 固件校验
            - sha256sum
