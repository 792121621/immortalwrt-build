#============================================================================================
# https://github.com/ophub/amlogic-s9xxx-openwrt
# Description: 电视盒子编译+IMG打包
#============================================================================================

name: 电视盒子编译+IMG打包

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "选择源码分支"
        required: false
        default: "openwrt-main"
        type: choice
        options:
          - openwrt-main
          - immortalwrt-master
          - all
      openwrt_board:
        description: "选择设备型号"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - xiaomi-wr30u-stock
          - xiaomi-wr30u-openwrt-uboot
          - xiaomi-wr30u-112m-ubi-nmbm
          - xiaomi-cr6608
      openwrt_version:
        description: "输入OpenWrt版本号（为空使用最新版本）"
        required: false
        default: ""
        type: string
      openwrt_storage:
        description: "选择镜像存储类型"
        required: false
        default: "save"
        type: choice
        options:
          - save
          - temp
          - all
      builder_name:
        description: "设置OpenWrt构建者签名"
        required: false
        default: "angel"
        type: choice
        options:
          - angel
          - yourname

env:
  FEEDS_CONF: config/${{ inputs.source_branch }}/feeds.conf.default
  CONFIG_FILE: config/${{ inputs.source_branch }}/config
  DIY_P1_SH: config/${{ inputs.source_branch }}/diy-part1.sh
  DIY_P2_SH: config/${{ inputs.source_branch }}/diy-part2.sh
  TZ: America/New_York

jobs:
  build:
    runs-on: ubuntu-24.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      # 检出代码仓库
      - name: Checkout
        uses: actions/checkout@v4
        # 中文注释：从GitHub仓库检出代码到工作目录

      # 初始化编译环境
      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 中文注释：清理Docker镜像和不必要的软件包
          docker rmi `docker images -q` || true
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null

          # 中文注释：更新软件源并安装依赖
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
          python3-setuptools rsync swig unzip zlib1g-dev file wget
          
          # 中文注释：清理APT缓存并设置时区
          sudo apt-get -y autoremove --purge
          sudo apt-get clean
          sudo mkdir -p /workdir
          sudo chown ${USER}:${GROUPS} /workdir
          sudo timedatectl set-timezone "${TZ}"
          
          # 中文注释：输出初始化状态
          echo "status=success" >> ${GITHUB_OUTPUT}
        # 中文注释：初始化编译所需的Ubuntu 24.04环境

      # 克隆源码
      - name: Clone source code [ ${{ inputs.source_branch }} ]
        id: codes
        working-directory: /workdir
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          # 中文注释：定义源码分支列表
          if [[ "${{ inputs.source_branch }}" == "all" ]]; then
              BRANCHES=("openwrt-main" "immortalwrt-master")
          else
              BRANCHES=("${{ inputs.source_branch }}")
          fi

          # 中文注释：循环处理每个分支
          for branch in "${BRANCHES[@]}"; do
              # 中文注释：根据分支设置源码仓库和分支
              if [[ "${branch}" == *"openwrt-main"* ]]; then
                  REPO_URL="https://github.com/openwrt/openwrt"
                  REPO_BRANCH="main"
                  TAGS_NAME="official"
                  OUTPUT_DIR="openwrt_openwrt-main"
              elif [[ "${branch}" == *"immortalwrt-master"* ]]; then
                  REPO_URL="https://github.com/immortalwrt/immortalwrt"
                  REPO_BRANCH="master"
                  TAGS_NAME="immortalwrt"
                  OUTPUT_DIR="openwrt_immortalwrt-master"
              else
                  echo "未知的源码仓库：${branch}"
                  exit 1
              fi

              # 中文注释：如果指定了版本号，则使用该版本
              if [[ -n "${{ inputs.openwrt_version }}" ]]; then
                  REPO_BRANCH="${{ inputs.openwrt_version }}"
              fi

              # 中文注释：克隆源码到指定目录
              git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} ${OUTPUT_DIR}
              ln -sf /workdir/${OUTPUT_DIR} ${GITHUB_WORKSPACE}/${OUTPUT_DIR}

              # 中文注释：为每种存储类型设置构建标签
              if [[ "${{ inputs.openwrt_storage }}" == "all" ]]; then
                  STORAGES=("save" "temp")
              else
                  STORAGES=("${{ inputs.openwrt_storage }}")
              fi
              for storage in "${STORAGES[@]}"; do
                  echo "build_tag_${branch}_${storage}=OpenWrt_${TAGS_NAME}_${storage}_$(date +"%Y.%m")" >> ${GITHUB_OUTPUT}
              done
              echo -e "Branch: ${branch}\nREPO_URL: [ ${REPO_URL} ]\nREPO_BRANCH: [ ${REPO_BRANCH} ]\nTAGS_NAME: [ ${TAGS_NAME} ]"
              df -hT ${PWD}
          done
          echo "status=success" >> ${GITHUB_OUTPUT}
        # 中文注释：克隆指定的OpenWrt或ImmortalWrt源码，支持all选项

      # 加载自定义feeds
      - name: Load custom feeds
        run: |
          # 中文注释：为每个分支加载feeds配置
          if [[ "${{ inputs.source_branch }}" == "all" ]]; then
              BRANCHES=("openwrt-main" "immortalwrt-master")
          else
              BRANCHES=("${{ inputs.source_branch }}")
          fi
          for branch in "${BRANCHES[@]}"; do
              OUTPUT_DIR="openwrt_${branch}"
              FEEDS_CONF="config/${branch}/feeds.conf.default"
              DIY_P1_SH="config/${branch}/diy-part1.sh"
              [[ -f "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} ${OUTPUT_DIR}/feeds.conf.default
              chmod +x ${DIY_P1_SH}
              cd ${OUTPUT_DIR}/
              ${GITHUB_WORKSPACE}/${DIY_P1_SH}
              cd ../
          done
        # 中文注释：加载自定义的软件包feeds配置

      # 更新feeds
      - name: Update feeds
        run: |
          # 中文注释：为每个分支更新软件包索引
          if [[ "${{ inputs.source_branch }}" == "all" ]]; then
              BRANCHES=("openwrt-main" "immortalwrt-master")
          else
              BRANCHES=("${{ inputs.source_branch }}")
          fi
          for branch in "${BRANCHES[@]}"; do
              OUTPUT_DIR="openwrt_${branch}"
              cd ${OUTPUT_DIR}/
              ./scripts/feeds update -a
              cd ../
          done
        # 中文注释：更新feeds以确保最新软件包可用

      # 安装feeds
      - name: Install feeds
        run: |
          # 中文注释：为每个分支安装feeds中的软件包
          if [[ "${{ inputs.source_branch }}" == "all" ]]; then
              BRANCHES=("openwrt-main" "immortalwrt-master")
          else
              BRANCHES=("${{ inputs.source_branch }}")
          fi
          for branch in "${BRANCHES[@]}"; do
              OUTPUT_DIR="openwrt_${branch}"
              cd ${OUTPUT_DIR}/
              ./scripts/feeds install -a
              cd ../
          done
        # 中文注释：安装feeds中的软件包到编译环境

      # 加载自定义配置
      - name: Load custom configuration
        run: |
          # 中文注释：为每个分支加载自定义配置
          if [[ "${{ inputs.source_branch }}" == "all" ]]; then
              BRANCHES=("openwrt-main" "immortalwrt-master")
          else
              BRANCHES=("${{ inputs.source_branch }}")
          fi
          for branch in "${BRANCHES[@]}"; do
              OUTPUT_DIR="openwrt_${branch}"
              CONFIG_FILE="config/${branch}/config"
              DIY_P2_SH="config/${branch}/diy-part2.sh"
              [[ -d "files" ]] && cp -rf files ${OUTPUT_DIR}/files
              [[ -e "${CONFIG_FILE}" ]] && cp -f ${CONFIG_FILE} ${OUTPUT_DIR}/.config
              chmod +x ${DIY_P2_SH}
              cd ${OUTPUT_DIR}/
              ${GITHUB_WORKSPACE}/${DIY_P2_SH}
              cd ../
          done
        # 中文注释：应用自定义配置文件和文件

      # 下载软件包
      - name: Download package
        id: package
        run: |
          # 中文注释：为每个分支生成配置并下载软件包
          if [[ "${{ inputs.source_branch }}" == "all" ]]; then
              BRANCHES=("openwrt-main" "immortalwrt-master")
          else
              BRANCHES=("${{ inputs.source_branch }}")
          fi
          for branch in "${BRANCHES[@]}"; do
              OUTPUT_DIR="openwrt_${branch}"
              cd ${OUTPUT_DIR}/
              make defconfig
              make download -j8
              find dl -size -1024c -exec ls -l {} \;
              find dl -size -1024c -exec rm -f {} \;
              cd ../
          done
        # 中文注释：下载编译所需的软件包并清理小文件

      # 编译OpenWrt固件
      - name: Compile the OpenWrt
        id: compile
        run: |
          # 中文注释：为每个分支编译OpenWrt固件
          if [[ "${{ inputs.source_branch }}" == "all" ]]; then
              BRANCHES=("openwrt-main" "immortalwrt-master")
          else
              BRANCHES=("${{ inputs.source_branch }}")
          fi
          for branch in "${BRANCHES[@]}"; do
              OUTPUT_DIR="openwrt_${branch}"
              cd ${OUTPUT_DIR}/
              echo -e "$(nproc) 线程编译 ${branch}"
              make -j$(($(nproc) + 1)) V=s || make -j1 || make -j1 V=s
              cd ../
          done
          echo "status=success" >> ${GITHUB_OUTPUT}
        # 中文注释：编译OpenWrt固件，支持多线程和单线程重试

      # 清理服务器空间
      - name: Clear server space
        id: clean
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        run: |
          # 中文注释：为每个分支和存储类型创建输出目录并复制编译结果
          if [[ "${{ inputs.source_branch }}" == "all" ]]; then
              BRANCHES=("openwrt-main" "immortalwrt-master")
          else
              BRANCHES=("${{ inputs.source_branch }}")
          fi
          if [[ "${{ inputs.openwrt_storage }}" == "all" ]]; then
              STORAGES=("save" "temp")
          else
              STORAGES=("${{ inputs.openwrt_storage }}")
          fi
          for branch in "${BRANCHES[@]}"; do
              for storage in "${STORAGES[@]}"; do
                  OUTPUT_DIR="openwrt_${branch}_${storage}"
                  SRC_DIR="openwrt_${branch}"
                  mkdir -p ${OUTPUT_DIR}/output
                  cp -f ${SRC_DIR}/bin/targets/*/*/*rootfs.tar.gz ${OUTPUT_DIR}/output/ 2>/dev/null || true
                  cp -f ${SRC_DIR}/.config ${OUTPUT_DIR}/output/config
                  
                  # 中文注释：生成文件的sha256校验和
                  cd ${OUTPUT_DIR}/output/
                  for file in *; do [[ ! -d "${file}" ]] && sha256sum "${file}" >"${file}.sha"; done
                  cd ../../../
              done
              # 中文注释：清理源编译目录（仅保留output）
              cd openwrt_${branch}/
              rm -rf $(ls . | grep -v "^output$" | xargs) 2>/dev/null
              cd ../
          done

          # 中文注释：输出磁盘使用情况和状态
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}
        # 中文注释：清理服务器空间并准备输出文件

      # 上传OpenWrt固件到Release
      - name: Upload OpenWrt to Release
        uses: ncipollo/release-action@v1
        if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
        with:
          tag: ${{ steps.codes.outputs.build_tag_${{ inputs.source_branch }}_${{ inputs.openwrt_storage }} }}
          artifacts: openwrt_*/output/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}
        # 中文注释：将编译好的OpenWrt固件上传到GitHub Release

      # 打包OpenWrt镜像
      - name: Packaging OpenWrt
        if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
        uses: ophub/amlogic-s9xxx-openwrt@main
        with:
          openwrt_path: openwrt_*/output/*rootfs.tar.gz
          openwrt_board: ${{ inputs.openwrt_board }}
          builder_name: ${{ inputs.builder_name }}
          gh_token: ${{ secrets.GH_TOKEN }}
        # 中文注释：为指定设备打包OpenWrt镜像

      # 上传打包后的OpenWrt镜像
      - name: Upload the packaged OpenWrt
        uses: ncipollo/release-action@v1
        if: ${{ env.PACKAGED_STATUS }} == 'success' && !cancelled()
        with:
          tag: ${{ steps.codes.outputs.build_tag_${{ inputs.source_branch }}_${{ inputs.openwrt_storage }} }}
          artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}
          body: |
            ### OpenWrt镜像信息
            - 默认IP: 192.168.1.1
            - 默认用户名: root
            - 默认密码: password
            - 默认WiFi名称: OpenWrt
            - 默认WiFi密码: 无
            ### 安装到EMMC
            - 登录OpenWrt → 系统 → Amlogic服务 → 安装OpenWrt
            ### OpenWrt镜像验证
            - sha256sum
        # 中文注释：将打包好的OpenWrt镜像上传到GitHub Release
