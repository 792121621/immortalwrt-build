#============================================================================================
# Description: 编译Xiaomi Mi Router WR30U和CR6608的OpenWrt/ImmortalWrt固件
#============================================================================================

name: 路由器固件编译

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "选择源码分支"
        required: false
        default: "openwrt-main"
        type: choice
        options:
          - openwrt-main
          - immortalwrt-master
          - all
      device:
        description: "选择设备型号"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - xiaomi-mi-router-wr30u-stock
          - xiaomi-mi-router-wr30u-openwrt
          - xiaomi-mi-router-wr30u-112m-nmbm
          - xiaomi-mi-router-cr6608
      version:
        description: "指定源码版本（为空则使用最新版本）"
        required: false
        default: ""

env:
  TZ: Asia/Shanghai  # 设置时区为中国

jobs:
  build:
    runs-on: ubuntu-24.04  # 使用Ubuntu 24.04 LTS编译

    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 初始化编译环境
      - name: 初始化编译环境
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 清理Docker镜像
          docker rmi `docker images -q` 2>/dev/null || true
          # 清理不必要的软件包和文件
          # sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          # 配置软件源
          echo "配置软件源..."
          sudo bash -c 'cat << EOF > /etc/apt/sources.list
          deb http://archive.ubuntu.com/ubuntu/ noble main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu/ noble-updates main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu/ noble-backports main restricted universe multiverse
          deb http://security.ubuntu.com/ubuntu/ noble-security main restricted universe multiverse
          EOF'
          # 更新软件源
          sudo apt-get update -y || { echo "软件源更新失败"; exit 1; }
          # 安装编译依赖
          echo "安装编译依赖..."
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib \
          gettext git libncurses5-dev libssl-dev python3-setuptools rsync unzip zlib1g-dev \
          file wget
          # 验证依赖安装
          dpkg -l | grep -E "build-essential|clang|flex|bison|g++|gawk|gcc|gettext|git|libncurses-dev|libssl-dev|python3-setuptools|rsync|swig|unzip|zlib1g-dev|file|wget" || true
          # 清理软件包缓存
          sudo apt-get autoremove --purge -y
          sudo apt-get clean
          # 创建工作目录
          sudo mkdir -p /workdir
          sudo chown ${USER}:${GROUPS} /workdir
          # 设置时区
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 克隆源码
      - name: 克隆源码
        id: codes
        working-directory: /workdir
        if: steps.init.outputs.status == 'success' && !cancelled()
        run: |
          # 根据输入选择源码
          if [[ "${{ inputs.source_branch }}" == "openwrt-main" || "${{ inputs.source_branch }}" == "all" ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="openwrt"
          elif [[ "${{ inputs.source_branch }}" == "immortalwrt-master" || "${{ inputs.source_branch }}" == "all" ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              TAGS_NAME="immortalwrt"
          else
              echo "未知的源码仓库。"
              exit 1
          fi

          # 如果指定了版本，使用指定的版本
          if [[ -n "${{ inputs.version }}" ]]; then
              REPO_BRANCH="${{ inputs.version }}"
          fi

          # 克隆源码
          git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
          ln -sf /workdir/openwrt ${GITHUB_WORKSPACE}/openwrt

          # 设置输出信息
          echo "build_tag=OpenWrt_${TAGS_NAME}_$(date +%Y.%m)" >> ${GITHUB_OUTPUT}
          echo -e "REPO_URL: [ ${REPO_URL} ]\nREPO_BRANCH: [ ${REPO_BRANCH} ]\nTAGS_NAME: [ ${TAGS_NAME} ]"
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 更新和安装feeds
      - name: 更新和安装feeds
        run: |
          cd openwrt/
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      # 加载设备配置文件并编译
      - name: 加载设备配置文件并编译
        id: compile
        run: |
          cd openwrt/
          # 定义设备和架构映射
          declare -A devices=(
            ["xiaomi-mi-router-wr30u-stock"]="mediatek/filogic|CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_mi-router-wr30u-stock=y"
            ["xiaomi-mi-router-wr30u-openwrt"]="mediatek/filogic|CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_mi-router-wr30u-openwrt=y"
            ["xiaomi-mi-router-wr30u-112m-nmbm"]="mediatek/filogic|CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_mi-router-wr30u-112m-nmbm=y"
            ["xiaomi-mi-router-cr6608"]="ramips/mt7621|CONFIG_TARGET_ramips_mt7621_DEVICE_xiaomi_mi-router-cr6608=y"
          )

          # 根据输入设备选择编译
          if [[ "${{ inputs.device }}" == "all" ]]; then
            devices_to_build=("xiaomi-mi-router-wr30u-stock" "xiaomi-mi-router-wr30u-openwrt" "xiaomi-mi-router-wr30u-112m-nmbm" "xiaomi-mi-router-cr6608")
          else
            devices_to_build=("${{ inputs.device }}")
          fi

          # 循环编译每个设备
          for device in "${devices_to_build[@]}"; do
            echo "正在为设备 $device 编译..."
            # 获取架构和设备配置
            IFS='|' read -r arch config <<< "${devices[$device]}"
            config_file="target/linux/${arch}/config-6.6"

            # 检查配置文件是否存在
            if [[ ! -f "$config_file" ]]; then
              echo "错误：配置文件 $config_file 不存在！"
              exit 1
            fi

            # 清理旧的配置和构建
            make distclean
            # 复制配置文件
            cp "$config_file" .config
            # 添加设备配置
            echo "$config" >> .config
            # 设置目标架构
            if [[ "$arch" == "mediatek/filogic" ]]; then
              echo "CONFIG_TARGET_mediatek=y" >> .config
              echo "CONFIG_TARGET_m
