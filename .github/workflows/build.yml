#============================================================================================
# 说明：为小米设备编译 OpenWrt 和 ImmortalWrt 固件
#============================================================================================

name: 编译小米 OpenWrt/ImmortalWrt 固件

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "选择要编译的源分支"
        required: true
        default: "openwrt-main"
        type: choice
        options:
          - openwrt-main
          - immortalwrt-master
      openwrt_board:
        description: "选择要编译的设备型号"
        required: true
        default: "xiaomi_wr30u_stock"
        type: choice
        options:
          - xiaomi_wr30u_stock
          - xiaomi_wr30u_ubootmod
          - xiaomi_wr30u_nmbm
          - xiaomi_cr6608
      openwrt_version:
        description: "指定版本（如 v23.05.0-rc3，留空使用最新版本）"
        required: false
        default: ""
        type: string

env:
  FEEDS_CONF: config/${{ inputs.source_branch }}/feeds.conf.default
  CONFIG_FILE: config/${{ inputs.source_branch }}/config
  DIY_P1_SH: config/${{ inputs.source_branch }}/diy-part1.sh
  DIY_P2_SH: config/${{ inputs.source_branch }}/diy-part2.sh
  TZ: America/New_York

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      # 步骤 1：检出代码仓库
      - name: 检出代码仓库
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 步骤 2：初始化编译环境
      - name: 初始化编译环境
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 清理 Docker 镜像和无关目录
          docker rmi `docker images -q` || true
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null

          # 更新包列表并安装 OpenWrt 官方推荐的编译依赖
          sudo -E apt-get -y update
          sudo -E apt-get -y install build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-distutils rsync unzip zlib1g-dev file wget
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

          # 创建工作目录并设置时区
          sudo mkdir -p /workdir
          sudo chown ${USER}:${GROUPS} /workdir
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤 3：克隆 OpenWrt 或 ImmortalWrt 源代码
      - name: 克隆源代码
        id: codes
        working-directory: /workdir
        if: ${{ steps.init.outputs.status == 'success' && !cancelled() }}
        run: |
          # 根据选择的源分支配置仓库信息
          if [[ "${{ inputs.source_branch }}" == "openwrt-main" ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="openwrt"
          elif [[ "${{ inputs.source_branch }}" == "immortalwrt-master" ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              TAGS_NAME="immortalwrt"
          else
              echo "选择的源分支无效。"
              exit 1
          fi

          # 如果指定了版本，则使用指定版本，否则使用最新版本
          if [[ -n "${{ inputs.openwrt_version }}" ]]; then
              REPO_BRANCH="${{ inputs.openwrt_version }}"
          fi

          # 克隆源代码
          git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
          ln -sf /workdir/openwrt ${GITHUB_WORKSPACE}/openwrt

          # 设置编译标签并输出信息
          echo "build_tag=${TAGS_NAME}_${{ inputs.openwrt_board }}_$(date +%Y.%m)" >> ${GITHUB_OUTPUT}
          echo -e "REPO_URL: [ ${REPO_URL} ]\nREPO_BRANCH: [ ${REPO_BRANCH} ]\nTAGS_NAME: [ ${TAGS_NAME} ]"
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤 4：加载自定义软件源配置
      - name: 加载自定义软件源
        run: |
          # 如果存在软件源配置文件，则复制到工作目录
          [[ -f "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
          chmod +x ${DIY_P1_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P1_SH}

      # 步骤 5：更新软件源
      - name: 更新软件源
        run: |
          cd openwrt/
          ./scripts/feeds update -a

      # 步骤 6：安装软件源
      - name: 安装软件源
        run: |
          cd openwrt/
          ./scripts/feeds install -a

      # 步骤 7：加载设备自定义配置
      - name: 加载自定义配置
        run: |
          # 复制设备相关文件和配置文件
          [[ -d "files" ]] && mv -f files openwrt/files
          [[ -e "${CONFIG_FILE}" ]] && cp -f ${CONFIG_FILE} openwrt/.config
          chmod +x ${DIY_P2_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P2_SH}

      # 步骤 8：下载编译所需包
      - name: 下载编译包
        id: package
        run: |
          cd openwrt/
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      # 步骤 9：编译固件
      - name: 编译固件
        id: compile
        run: |
          cd openwrt/
          echo -e "使用 $(nproc) 个线程进行编译"
          make -j$(($(nproc) + 1)) V=s || make -j1 V=s
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤 10：整理输出并清理空间
      - name: 整理输出文件
        id: clean
        if: ${{ steps.compile.outputs.status == 'success' && !cancelled() }}
        run: |
          # 创建输出目录并复制编译好的固件
          cd openwrt/
          mkdir output
          cp -f bin/targets/*/*/*rootfs.tar.gz output/
          cp -f .config output/config

          # 清理非输出文件
          rm -rf $(ls . | grep -v "^output$" | xargs) 2>/dev/null

          # 为输出文件生成 SHA256 校验文件
          cd output/
          for file in *; do [[ ! -d "${file}" ]] && sha256sum "${file}" >"${file}.sha"; done

          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤 11：上传固件到 GitHub Release
      - name: 上传固件到 Release
        uses: ncipollo/release-action@main
        if: ${{ steps.clean.outputs.status == 'success' && !cancelled() }}
        with:
          tag: ${{ steps.codes.outputs.build_tag }}
          artifacts: openwrt/output/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}
          body: |
            ### 固件信息
            - 默认 IP: 192.168.1.1
            - 默认用户名: root
            - 默认密码: password
            - 默认 WiFi 名称: OpenWrt
            - 默认 WiFi 密码: 无
            ### 安装到 EMMC
            - 登录 OpenWrt → 系统 → Amlogic 服务 → 安装 OpenWrt
            ### 固件校验
            - sha256sum
