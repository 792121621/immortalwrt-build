#============================================================================================
# Description: 编译Xiaomi Mi Router WR30U和CR6608的OpenWrt/ImmortalWrt固件
#============================================================================================

name: 编译路由器OpenWrt固件

on:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "选择固件源"
        required: false
        default: "openwrt-main"
        type: choice
        options:
          - openwrt-main
          - immortalwrt-master
          - all
      device_board:
        description: "选择设备"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - xiaomi_wr30u_stock
          - xiaomi_wr30u_openwrt_uboot
          - xiaomi_wr30u_112m_ubi_nmbm
          - xiaomi_cr6608
      firmware_version:
        description: "指定固件版本（为空则使用最新版本）"
        required: false
        default: ""

env:
  TZ: Asia/Shanghai
  # 固件源配置文件路径
  FEEDS_CONF: config/${{ inputs.source_branch }}/feeds.conf.default
  # 自定义脚本路径
  DIY_P1_SH: config/${{ inputs.source_branch }}/diy-part1.sh
  DIY_P2_SH: config/${{ inputs.source_branch }}/diy-part2.sh

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      # 1. 检出代码
      - name: 检出仓库代码
        uses: actions/checkout@v4

      # 2. 初始化编译环境
      - name: 初始化编译环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 清理Docker镜像
          # docker rmi `docker images -q` || true
          # 清理不必要的软件和缓存
          # sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          # sudo apt-get update
          # 安装编译依赖
          sudo apt-get install -y rar build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget
          sudo apt-get autoremove -y --purge
          sudo apt-get clean
          # 创建工作目录
          sudo mkdir -p /workdir
          sudo chown ${USER}:${GROUPS} /workdir
          # 设置时区
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 3. 克隆固件源代码
      - name: 克隆固件源代码
        id: codes
        working-directory: /workdir
        run: |
          # 根据输入选择固件源
          if [[ "${{ inputs.source_branch }}" == "openwrt-main" ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="openwrt"
          elif [[ "${{ inputs.source_branch }}" == "immortalwrt-master" ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              TAGS_NAME="immortalwrt"
          elif [[ "${{ inputs.source_branch }}" == "all" ]]; then
              echo "all_sources=openwrt-main,immortalwrt-master" >> ${GITHUB_OUTPUT}
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="openwrt"
          fi

          # 如果指定了版本，使用指定的tag
          if [[ -n "${{ inputs.firmware_version }}" ]]; then
              REPO_BRANCH="${{ inputs.firmware_version }}"
          fi

          # 克隆源代码
          git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
          ln -sf /workdir/openwrt ${GITHUB_WORKSPACE}/openwrt

          # 设置编译标签
          echo "build_tag=${TAGS_NAME}_$(date +%Y%m%d)" >> ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 4. 加载自定义feeds
      - name: 加载自定义feeds
        run: |
          # 复制feeds配置文件
          [[ -f "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
          chmod +x ${DIY_P1_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P1_SH}

      # 5. 更新feeds
      - name: 更新feeds
        run: cd openwrt/ && ./scripts/feeds update -a

      # 6. 安装feeds
      - name: 安装feeds
        run: cd openwrt/ && ./scripts/feeds install -a

      # 7. 加载设备配置文件
      - name: 加载设备配置文件
        run: |
          # 根据设备选择架构和配置文件
          case "${{ inputs.device_board }}" in
            "xiaomi_wr30u_stock"|"xiaomi_wr30u_openwrt_uboot"|"xiaomi_wr30u_112m_ubi_nmbm")
              ARCH="mediatek/filogic"
              CONFIG_FILE="target/linux/mediatek/filogic/config-6.6"
              ;;
            "xiaomi_cr6608")
              ARCH="ramips/mt7621"
              CONFIG_FILE="target/linux/ramips/mt7621/config-6.6"
              ;;
            "all")
              ARCH="mediatek/filogic"
              CONFIG_FILE="target/linux/mediatek/filogic/config-6.6"
              echo "all_devices=xiaomi_wr30u_stock,xiaomi_wr30u_openwrt_uboot,xiaomi_wr30u_112m_ubi_nmbm,xiaomi_cr6608" >> ${GITHUB_OUTPUT}
              ;;
          esac

          # 复制官方配置文件
          cp -f openwrt/${CONFIG_FILE} openwrt/.config

          # 根据设备布局修改配置文件
          case "${{ inputs.device_board }}" in
            "xiaomi_wr30u_stock")
              echo "CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_wr30u-stock=y" >> openwrt/.config
              ;;
            "xiaomi_wr30u_openwrt_uboot")
              echo "CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_wr30u-ubootmod=y" >> openwrt/.config
              ;;
            "xiaomi_wr30u_112m_ubi_nmbm")
              echo "CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_wr30u-112m-ubi-nmbm=y" >> openwrt/.config
              ;;
            "xiaomi_cr6608")
              echo "CONFIG_TARGET_ramips_mt7621_DEVICE_xiaomi_cr6608=y" >> openwrt/.config
              ;;
          esac

          chmod +x ${DIY_P2_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P2_SH}

      # 8. 下载软件包
      - name: 下载软件包
        run: |
          cd openwrt/
          make defconfig
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      # 9. 编译固件
      - name: 编译固件
        id: compile
        run: |
          cd openwrt/
          echo "使用$(nproc)线程编译"
          make -j$(($(nproc) + 1)) V=s || make -j1 V=s
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 10. 整理输出文件
      - name: 整理输出文件
        id: clean
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        run: |
          cd openwrt/
          mkdir -p output
          # 只保留.ubi、.bin、.fip、.itb文件
          rar a output/targets.rar bin/targets
          cp -f .config output/config
          # 生成sha256sum校验文件
          cd output/
          for file in *; do [[ -f "${file}" ]] && sha256sum "${file}" >"${file}.sha"; done
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 11. 上传固件到Release
      - name: 上传固件到Release
        uses: ncipollo/release-action@v1
        if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
        with:
          tag: ${{ steps.codes.outputs.build_tag }}
          artifacts: openwrt/output/*
          allowUpdates: true
          token: ${{ secrets.GH_TOKEN }}
          body: |
            ### 固件信息
            - 默认IP: 192.168.1.1
            - 默认用户名: root
            - 默认密码: password
            - 默认WiFi名称: OpenWrt
            - 默认WiFi密码: 无
            ### 固件校验
            - 使用sha256sum校验文件
