#============================================================================================
# Description: 编译Xiaomi Mi Router WR30U和CR6608的OpenWrt/ImmortalWrt固件
#============================================================================================

name: 编译OpenWrt/ImmortalWrt固件

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "选择固件源码分支"
        required: false
        default: "openwrt-main"
        type: choice
        options:
          - openwrt-main
          - immortalwrt-master
      openwrt_board:
        description: "选择设备型号"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - xiaomi_wr30u-stock
          - xiaomi_wr30u-openwrt-uboot
          - xiaomi_wr30u-112m-ubi-nmbm
          - xiaomi_cr6608
      openwrt_version:
        description: "指定固件版本（为空则使用最新版本）"
        required: false
        default: ""
        type: string

env:
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      # 检出代码仓库
      - name: 检出代码
        uses: actions/checkout@v4

      # 初始化编译环境
      - name: 初始化环境
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 清理无关软件和缓存
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android
          sudo apt-get update
          # 安装编译依赖，移除gcc-multilib和g++-multilib
          sudo apt-get install -y build-essential clang flex bison g++ gawk \
            gettext git libncurses5-dev libssl-dev python3-setuptools rsync \
            swig unzip zlib1g-dev file wget
          if [ $? -ne 0 ]; then
            echo "依赖安装失败，请检查apt日志"
            exit 1
          fi
          sudo apt-get autoremove -y --purge
          sudo apt-get clean
          # 创建工作目录
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          sudo timedatectl set-timezone "$TZ"
          echo "status=success" >> $GITHUB_OUTPUT

      # 克隆OpenWrt/ImmortalWrt源码
      - name: 克隆源码
        id: codes
        working-directory: /workdir
        if: steps.init.outputs.status == 'success' && !cancelled()
        run: |
          # 根据分支选择源码仓库和分支
          if [[ "${{ inputs.source_branch }}" == "openwrt-main" ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="openwrt"
          elif [[ "${{ inputs.source_branch }}" == "immortalwrt-master" ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              TAGS_NAME="immortalwrt"
          else
              echo "未知源码分支"
              exit 1
          fi

          # 如果指定了版本，使用指定的tag
          if [[ -n "${{ inputs.openwrt_version }}" ]]; then
              REPO_BRANCH="${{ inputs.openwrt_version }}"
          fi

          # 克隆源码
          git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
          if [ $? -ne 0 ]; then
            echo "源码克隆失败，请检查网络或分支"
            exit 1
          fi
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

          # 设置编译标签
          echo "build_tag=${TAGS_NAME}_${{ inputs.openwrt_board }}_$(date +%Y.%m)" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      # 加载自定义feeds
      - name: 加载自定义feeds
        run: |
          # 复制feeds配置文件（如果存在）
          FEEDS_CONF="config/${{ inputs.source_branch }}/feeds.conf.default"
          [[ -f "$FEEDS_CONF" ]] && cp -f $FEEDS_CONF openwrt/feeds.conf.default
          cd openwrt/
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      # 加载设备配置文件
      - name: 加载设备配置
        run: |
          # 根据设备选择架构和配置文件
          case "${{ inputs.openwrt_board }}" in
            "xiaomi_wr30u-stock"|"xiaomi_wr30u-openwrt-uboot"|"xiaomi_wr30u-112m-ubi-nmbm")
              CONFIG_PATH="target/linux/mediatek/filogic/config-6.6"
              ;;
            "xiaomi_cr6608")
              CONFIG_PATH="target/linux/ramips/mt7621/config-6.6"
              ;;
            "all")
              CONFIG_PATH="config/${{ inputs.source_branch }}/config"
              ;;
          esac

          # 复制配置文件
          cd openwrt/
          if [[ -f "$GITHUB_WORKSPACE/$CONFIG_PATH" ]]; then
            cp -f "$GITHUB_WORKSPACE/$CONFIG_PATH" .config
          else
            echo "配置文件 $CONFIG_PATH 不存在，请检查"
            exit 1
          fi
          make defconfig

      # 下载依赖包
      - name: 下载依赖包
        id: package
        run: |
          cd openwrt/
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      # 编译固件
      - name: 编译固件
        id: compile
        run: |
          cd openwrt/
          echo "使用$(nproc)线程编译"
          make -j$(($(nproc) + 1)) V=s || make -j1 V=s
          if [ $? -ne 0 ]; then
            echo "编译失败，请检查日志"
            exit 1
          fi
          echo "status=success" >> $GITHUB_OUTPUT

      # 整理输出文件
      - name: 整理输出文件
        id: clean
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          cd openwrt/
          mkdir -p output
          # 复制编译产物
          cp -f bin/targets/*/*/*rootfs.tar.gz output/ 2>/dev/null || true
          cp -f .config output/config
          # 生成校验文件
          cd output/
          for file in *; do [[ ! -d "$file" ]] && sha256sum "$file" >"$file.sha"; done
          echo "status=success" >> $GITHUB_OUTPUT

      # 上传固件到Release
      - name: 上传固件
        uses: ncipollo/release-action@v1
        if: steps.clean.outputs.status == 'success' && !cancelled()
        with:
          tag: ${{ steps.codes.outputs.build_tag }}
          artifacts: openwrt/output/*
          allowUpdates: true
          token: ${{ secrets.GH_TOKEN }}
          body: |
            ### 固件信息
            - 默认IP: 192.168.1.1
            - 默认用户: root
            - 默认密码: password
            - 默认WiFi名称: OpenWrt
            - 默认WiFi密码: 无
            ### 校验
            - 使用sha256sum验证文件完整性
