name: Auto Fetch OpenWrt and ImmortalWrt Config

# 定义触发条件
on:
  workflow_dispatch:
    inputs:
      firmware_type:
        description: '选择固件类型'
        required: true
        default: 'all'
        type: choice
        options:
          - openwrt-main
          - immortalwrt-master
          - all
      device_model:
        description: '选择设备型号'
        required: true
        default: 'all'
        type: choice
        options:
          - xiaomi_wr30u_stock
          - xiaomi_wr30u_ubootmod
          - xiaomi_wr30u_nmbm
          - xiaomi_cr6608
          - 11111111
          - all
      version:
        description: '指定版本（为空则使用最新版本）'
        required: false
        type: string

jobs:
  fetch-config:
    # 指定运行环境
    runs-on: ubuntu-24.04

    steps:
      # 检出代码仓库
      - name: 检出代码
        uses: actions/checkout@v4

      # 安装依赖
      - name: 安装编译依赖
        run: |
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
          python3-setuptools rsync swig unzip zlib1g-dev file wget

      # 设置环境变量和路径
      - name: 设置环境
        run: |
          mkdir -p config
          echo "CONFIG_DIR=config" >> $GITHUB_ENV
          echo "FIRMWARE_TYPE=${{ github.event.inputs.firmware_type }}" >> $GITHUB_ENV
          echo "DEVICE_MODEL=${{ github.event.inputs.device_model }}" >> $GITHUB_ENV
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

      # 处理 OpenWrt-main 配置
      - name: 获取 OpenWrt-main 配置
        if: contains(fromJSON('["openwrt-main", "all"]'), github.event.inputs.firmware_type)
        run: |
          # 克隆 OpenWrt-main 仓库
          git clone https://github.com/openwrt/openwrt.git openwrt-main
          cd openwrt-main
          # 如果指定了版本，则切换到指定版本
          if [ -n "${{ github.event.inputs.version }}" ]; then
            git checkout ${{ github.event.inputs.version }}
          fi
          # 更新 feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          # 根据设备型号生成配置
          if [ "${{ github.event.inputs.device_model }}" = "all" ]; then
            for model in xiaomi_wr30u_stock xiaomi_wr30u_ubootmod xiaomi_wr30u_nmbm xiaomi_cr6608; do
              make defconfig
              # 模拟生成 config 文件（需替换为实际的 config 生成命令）
              echo "Generated config for $model" > ../${CONFIG_DIR}/openwrt-main/$model/config
            done
          else
            make defconfig
            # 模拟生成 config 文件（需替换为实际的 config 生成命令）
            echo "Generated config for ${{ github.event.inputs.device_model }}" > ../${CONFIG_DIR}/openwrt-main/${{ github.event.inputs.device_model }}/config
          fi

      # 处理 ImmortalWrt-master 配置
      - name: 获取 ImmortalWrt-master 配置
        if: contains(fromJSON('["immortalwrt-master", "all"]'), github.event.inputs.firmware_type)
        run: |
          # 克隆 ImmortalWrt-master 仓库
          git clone https://github.com/immortalwrt/immortalwrt.git immortalwrt-master
          cd immortalwrt-master
          # 如果指定了版本，则切换到指定版本
          if [ -n "${{ github.event.inputs.version }}" ]; then
            git checkout ${{ github.event.inputs.version }}
          fi
          # 更新 feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          # 根据设备型号生成配置
          if [ "${{ github.event.inputs.device_model }}" = "all" ]; then
            for model in xiaomi_wr30u_stock xiaomi_wr30u_ubootmod xiaomi_wr30u_nmbm xiaomi_cr6608; do
              make defconfig
              # 模拟生成 config 文件（需替换为实际的 config 生成命令）
              echo "Generated config for $model" > ../${CONFIG_DIR}/immortalwrt-master/$model/config
            done
          else
            make defconfig
            # 模拟生成 config 文件（需替换为实际的 config 生成命令）
            echo "Generated config for ${{ github.event.inputs.device_model }}" > ../${CONFIG_DIR}/immortalwrt-master/${{ github.event.inputs.device_model }}/config
          fi

      # 上传生成的 config 文件
      - name: 上传配置
        uses: actions/upload-artifact@v4
        with:
          name: config-files
          path: config/
