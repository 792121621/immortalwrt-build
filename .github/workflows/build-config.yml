name: Auto Generate OpenWrt/ImmortalWrt Config

# 定义触发条件
on:
  workflow_dispatch:
    inputs:
      firmware_type:
        description: '选择固件类型'
        required: true
        default: 'all'
        type: choice
        options:
          - openwrt-main
          - immortalwrt-master
          - all
      device_type:
        description: '选择设备型号'
        required: true
        default: 'all'
        type: choice
        options:
          - xiaomi_mi-router-wr30u-stock
          - xiaomi_mi-router-wr30u-ubootmod
          - xiaomi_mi-router-wr30u-112m-nmbm
          - xiaomi_mi-router-cr6608
          - all
      version:
        description: '指定版本号（留空使用最新版本）'
        required: false
        type: string

jobs:
  generate-config:
    # 指定运行环境
    runs-on: ubuntu-24.04

    steps:
      # 检出代码库
      - name: 检出代码库
        uses: actions/checkout@v4

      # 安装依赖
      - name: 安装编译依赖
        run: |
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
          python3-setuptools rsync swig unzip zlib1g-dev file wget

      # 设置固件和设备列表
      - name: 设置固件和设备列表
        id: set-lists
        run: |
          # 根据输入设置固件类型列表
          if [ "${{ github.event.inputs.firmware_type }}" == "all" ]; then
            FIRMWARE_TYPES="openwrt-main immortalwrt-master"
          else
            FIRMWARE_TYPES="${{ github.event.inputs.firmware_type }}"
          fi
          echo "FIRMWARE_TYPES=$FIRMWARE_TYPES" >> $GITHUB_ENV

          # 根据输入设置设备型号列表
          if [ "${{ github.event.inputs.device_type }}" == "all" ]; then
            DEVICE_TYPES="xiaomi_mi-router-wr30u-stock xiaomi_mi-router-wr30u-ubootmod xiaomi_mi-router-wr30u-112m-nmbm xiaomi_mi-router-cr6608"
          else
            DEVICE_TYPES="${{ github.event.inputs.device_type }}"
          fi
          echo "DEVICE_TYPES=$DEVICE_TYPES" >> $GITHUB_ENV

      # 克隆固件源码
      - name: 克隆固件源码
        run: |
          for FIRMWARE in $FIRMWARE_TYPES; do
            case $FIRMWARE in
              openwrt-main)
                REPO_URL="https://github.com/openwrt/openwrt.git"
                BRANCH="main"
                ;;
              immortalwrt-master)
                REPO_URL="https://github.com/immortalwrt/immortalwrt.git"
                BRANCH="master"
                ;;
            esac
            # 如果指定了版本，使用指定的版本
            if [ -n "${{ github.event.inputs.version }}" ]; then
              git clone --depth 1 $REPO_URL -b ${{ github.event.inputs.version }} $FIRMWARE
            else
              git clone --depth 1 $REPO_URL -b $BRANCH $FIRMWARE
            fi
          done

      # 自动识别架构并生成 config 文件
      - name: 生成 config 文件
        run: |
          for FIRMWARE in $FIRMWARE_TYPES; do
            cd $FIRMWARE
            # 更新 feeds
            ./scripts/feeds update -a
            ./scripts/feeds install -a

            for DEVICE in $DEVICE_TYPES; do
              # 根据设备型号设置目标架构
              case $DEVICE in
                xiaomi_mi-router-wr30u-stock|xiaomi_mi-router-wr30u-ubootmod|xiaomi_mi-router-wr30u-112m-nmbm)
                  TARGET="mediatek/filogic"
                  ;;
                xiaomi_mi-router-cr6608)
                  TARGET="ramips/mt7621"
                  ;;
              esac

              # 设置目标架构到环境变量（确保 make 使用正确的目标）
              echo "CONFIG_TARGET=$TARGET" > .config
              # 生成默认 config 文件
              make defconfig

              # 保存 config 文件到指定路径
              mkdir -p ../config/$FIRMWARE/$DEVICE
              cp .config ../config/$FIRMWARE/$DEVICE/config
            done
            cd ..
          done

      # 上传 config 文件
      - name: 上传 config 文件
        uses: actions/upload-artifact@v4
        with:
          name: config-files
          path: config/
