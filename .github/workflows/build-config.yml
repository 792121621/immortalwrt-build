name: Generate OpenWrt and ImmortalWrt Config Files

# 定义触发条件
on:
  workflow_dispatch: # 手动触发工作流
    inputs:
      firmware_type: # 固件类型选择
        description: '选择固件类型: openwrt-main, immortalwrt-master 或 all'
        required: true
        default: 'all'
        type: choice
        options:
          - openwrt-main
          - immortalwrt-master
          - all
      device_type: # 设备型号选择
        description: '选择设备型号: xiaomi_mi-router-wr30u-stock, xiaomi_mi-router-wr30u-ubootmod, xiaomi_mi-router-wr30u-112m-nmbm, xiaomi_mi-router-cr6608 或 all'
        required: true
        default: 'all'
        type: choice
        options:
          - xiaomi_mi-router-wr30u-stock
          - xiaomi_mi-router-wr30u-ubootmod
          - xiaomi_mi-router-wr30u-112m-nmbm
          - xiaomi_mi-router-cr6608
          - all
      version: # 固件版本选择
        description: '输入固件版本号 (为空则使用最新版本)'
        required: false
        default: ''

# 定义工作流中的作业
jobs:
  generate-config:
    # 使用 Ubuntu 24.04 LTS 作为运行环境
    runs-on: ubuntu-24.04

    steps:
      # 检出代码仓库
      - name: Checkout repository
        uses: actions/checkout@v4

      # 安装依赖
      - name: Install dependencies
        run: |
          # 更新包索引并安装所需依赖
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
          python3-setuptools rsync swig unzip zlib1g-dev file wget

      # 设置固件和设备列表
      - name: Setup firmware and device lists
        id: setup
        run: |
          # 根据输入设置固件类型列表
          if [ "${{ github.event.inputs.firmware_type }}" == "all" ]; then
            FIRMWARE_LIST="openwrt-main immortalwrt-master"
          else
            FIRMWARE_LIST="${{ github.event.inputs.firmware_type }}"
          fi
          echo "FIRMWARE_LIST=$FIRMWARE_LIST" >> $GITHUB_ENV

          # 根据输入设置设备型号列表
          if [ "${{ github.event.inputs.device_type }}" == "all" ]; then
            DEVICE_LIST="xiaomi_mi-router-wr30u-stock xiaomi_mi-router-wr30u-ubootmod xiaomi_mi-router-wr30u-112m-nmbm xiaomi_mi-router-cr6608"
          else
            DEVICE_LIST="${{ github.event.inputs.device_type }}"
          fi
          echo "DEVICE_LIST=$DEVICE_LIST" >> $GITHUB_ENV

      # 克隆固件源码并生成 config 文件
      - name: Clone and generate config
        run: |
          # 创建保存 config 文件的目录
          mkdir -p config

          # 遍历固件类型
          for firmware in $FIRMWARE_LIST; do
            # 根据固件类型设置仓库地址
            if [ "$firmware" == "openwrt-main" ]; then
              REPO_URL="https://github.com/openwrt/openwrt.git"
            elif [ "$firmware" == "immortalwrt-master" ]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt.git"
            fi

            # 克隆仓库
            git clone --depth 1 $REPO_URL $firmware
            cd $firmware

            # 如果指定了版本，切换到对应版本
            if [ ! -z "${{ github.event.inputs.version }}" ]; then
              git checkout ${{ github.event.inputs.version }}
            fi

            # 更新 feeds
            ./scripts/feeds update -a
            ./scripts/feeds install -a

            # 遍历设备型号
            for device in $DEVICE_LIST; do
              # 根据设备型号设置目标配置文件路径
              CONFIG_PATH="../config/$firmware/$device/config"

              # 创建设备对应的 config 目录
              mkdir -p $(dirname $CONFIG_PATH)

              # 生成默认 config 文件
              make defconfig

              # 根据设备型号选择目标并生成 config
              case $device in
                "xiaomi_mi-router-wr30u-stock")
                  # 假设目标为 xiaomi_wr30u_stock 的配置
                  # 这里需要根据实际的 OpenWrt/ImmortalWrt 目标名称调整
                  make menuconfig # 示例，需替换为实际的配置生成命令
                  ;;
                "xiaomi_mi-router-wr30u-ubootmod")
                  # 假设目标为 xiaomi_wr30u_ubootmod 的配置
                  make menuconfig # 示例，需替换为实际的配置生成命令
                  ;;
                "xiaomi_mi-router-wr30u-112m-nmbm")
                  # 假设目标为 xiaomi_wr30u_112m_nmbm 的配置
                  make menuconfig # 示例，需替换为实际的配置生成命令
                  ;;
                "xiaomi_mi-router-cr6608")
                  # 假设目标为 xiaomi_cr6608 的配置
                  make menuconfig # 示例，需替换为实际的配置生成命令
                  ;;
              esac

              # 保存生成的 .config 文件到指定路径
              cp .config $CONFIG_PATH
            done

            # 返回上一级目录
            cd ..
          done

      # 上传 config 文件
      - name: Upload config files
        uses: actions/upload-artifact@v4
        with:
          name: config-files
          path: config/
