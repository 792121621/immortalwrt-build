name: 电视盒子编译

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "选择源代码分支"
        required: false
        default: "openwrt-main"
        type: choice
        options:
          - openwrt-main
          - immortalwrt-master
      openwrt_version:
        description: "选择 OpenWrt 版本（为空则使用最新版本）"
        required: false
        type: string
      device:
        description: "选择设备"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - Xiaomi Mi Router WR30U (stock layout)
          - Xiaomi Mi Router WR30U (OpenWrt U-Boot layout)
          - Xiaomi Mi Router WR30U (112M UBI with NMBM-Enabled layout)
          - Xiaomi Mi Router CR6608

env:
  FEEDS_CONF: config/${{ inputs.source_branch }}/feeds.conf.default
  CONFIG_FILE: config/${{ inputs.source_branch }}/config
  DIY_P1_SH: config/${{ inputs.source_branch }}/diy-part1.sh
  DIY_P2_SH: config/${{ inputs.source_branch }}/diy-part2.sh
  TZ: America/New_York

jobs:
  build:
    runs-on: ubuntu-24.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 初始化环境
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
          python3-setuptools rsync swig unzip zlib1g-dev file wget
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: 克隆源代码 [ ${{ inputs.source_branch }} ]
        id: codes
        working-directory: /workdir
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          if [[ "${{ inputs.source_branch }}" == "openwrt-main" ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="official"
          elif [[ "${{ inputs.source_branch }}" == "immortalwrt-master" ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              TAGS_NAME="immortalwrt"
          else
              echo "未知的源代码仓库。"
              exit 1
          fi

          if [[ -n "${{ inputs.openwrt_version }}" ]]; then
              git clone -q --single-branch --branch=${{ inputs.openwrt_version }} ${REPO_URL} openwrt
          else
              git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
          fi

          ln -sf /workdir/openwrt ${GITHUB_WORKSPACE}/openwrt
          echo "build_tag=OpenWrt_${TAGS_NAME}_$(date +"%Y.%m")" >> ${GITHUB_OUTPUT}
          echo -e "REPO_URL: [ ${REPO_URL} ]\nREPO_BRANCH: [ ${REPO_BRANCH} ]\nTAGS_NAME: [ ${TAGS_NAME} ]"
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: 加载自定义 feeds
        run: |
          [[ -f "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
          chmod +x ${DIY_P1_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P1_SH}

      - name: 更新 feeds
        run: cd openwrt/ && ./scripts/feeds update -a

      - name: 安装 feeds
        run: cd openwrt/ && ./scripts/feeds install -a

      - name: 加载自定义配置
        run: |
          case "${{ inputs.device }}" in
            "Xiaomi Mi Router WR30U (stock layout)")
              ARCH="mediatek/filogic"
              DTS="mt7981b-xiaomi-mi-router-wr30u-stock"
              ;;
            "Xiaomi Mi Router WR30U (OpenWrt U-Boot layout)")
              ARCH="mediatek/filogic"
              DTS="mt7981b-xiaomi-mi-router-wr30u-openwrt-uboot"
              ;;
            "Xiaomi Mi Router WR30U (112M UBI with NMBM-Enabled layout)")
              ARCH="mediatek/filogic"
              DTS="mt7981b-xiaomi-mi-router-wr30u-112m-ubi-nmbm"
              ;;
            "Xiaomi Mi Router CR6608")
              ARCH="ramips/mt7621"
              DTS="xiaomi-mi-router-cr6608"
              ;;
            "all")
              ARCH="mediatek/filogic"
              DTS="all"
              ;;
            *)
              echo "未知设备"
              exit 1
              ;;
          esac

          if [[ "${{ inputs.device }}" != "all" ]]; then
            # 复制 config 文件
            CONFIG_PATH="openwrt/target/linux/${ARCH}/config-*"
            cp -f ${CONFIG_PATH} openwrt/.config

            # 选择 DTS 文件
            DTS_PATH="openwrt/target/linux/mediatek/dts/${DTS}.dts"
            echo "CONFIG_TARGET_${ARCH//\/*_/_}_DEVICE_${DTS}=y" >> openwrt/.config
          else
            # 对于 all，使用默认配置
            make defconfig
          fi

          # 运行自定义脚本
          [[ -e "${CONFIG_FILE}" ]] && cp -f ${CONFIG_FILE} openwrt/.config
          chmod +x ${DIY_P2_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P2_SH}

      - name: 下载软件包
        id: package
        run: |
          cd openwrt/
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: 编译 OpenWrt
        id: compile
        run: |
          cd openwrt/
          echo -e "$(nproc) 线程编译"
          make -j$(($(nproc) + 1)) V=s || make -j1 || make -j1 V=s
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: 上传 OpenWrt 到 Release
        uses: ncipollo/release-action@main
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        with:
          tag: ${{ steps.codes.outputs.build_tag }}
          artifacts: openwrt/bin/targets/*/*/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}
