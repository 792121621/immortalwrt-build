#============================================================================================
# 描述: 编译Xiaomi Mi Router WR30U和CR6608的OpenWrt/ImmortalWrt固件
#============================================================================================

name: 编译路由器OpenWrt固件

on:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "选择固件分支"
        required: true
        default: "openwrt-main"
        type: choice
        options:
          - openwrt-main
          - immortalwrt-master
          - all
      openwrt_board:
        description: "选择设备型号"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - xiaomi_wr30u_stock
          - xiaomi_wr30u_openwrt
          - xiaomi_wr30u_112m_nmbm
          - xiaomi_cr6608
      version:
        description: "指定版本号（留空使用最新版本）"
        required: false
        type: string

env:
  TZ: Asia/Shanghai
  # 配置文件路径
  CONFIG_DIR: config/${{ inputs.source_branch }}
  # 自定义脚本路径
  DIY_P1_SH: config/${{ inputs.source_branch }}/diy-part1.sh
  DIY_P2_SH: config/${{ inputs.source_branch }}/diy-part2.sh

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      # 步骤1：检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 步骤2：初始化编译环境
      - name: 初始化编译环境
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 清理环境
          # sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android
          # 更新包索引并安装依赖
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget expect
          # 设置时区
          sudo timedatectl set-timezone "${TZ}"
          # 创建工作目录
          sudo mkdir -p /workdir
          sudo chown ${USER}:${GROUPS} /workdir
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤3：克隆源代码
      - name: 克隆源代码
        id: codes
        working-directory: /workdir
        if: steps.init.outputs.status == 'success'
        run: |
          # 根据输入选择源代码仓库和分支
          if [[ "${{ inputs.source_branch }}" == "openwrt-main" || "${{ inputs.source_branch }}" == "all" ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="openwrt"
          elif [[ "${{ inputs.source_branch }}" == "immortalwrt-master" || "${{ inputs.source_branch }}" == "all" ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              TAGS_NAME="immortalwrt"
          else
              echo "未知的源代码仓库"
              exit 1
          fi

          # 如果指定了版本，切换到对应tag
          if [[ -n "${{ inputs.version }}" ]]; then
              git clone -q --single-branch --branch=${{ inputs.version }} ${REPO_URL} openwrt
          else
              git clone -q --single-branch --branch=${REPO_BRANCH} ${REPO_URL} openwrt
          fi

          ln -sf /workdir/openwrt ${GITHUB_WORKSPACE}/openwrt
          echo "build_tag=OpenWrt_${TAGS_NAME}_$(date +%Y.%m)" >> ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤4：加载自定义feeds
      - name: 加载自定义feeds
        run: |
          # 复制feeds配置文件
          [[ -f "${{ env.CONFIG_DIR }}/feeds.conf.default" ]] && cp -f ${{ env.CONFIG_DIR }}/feeds.conf.default openwrt/feeds.conf.default
          chmod +x ${{ env.DIY_P1_SH }}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${{ env.DIY_P1_SH }}

      # 步骤5：更新和安装feeds
      - name: 更新和安装feeds
        run: |
          cd openwrt/
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      # 步骤6：生成.config文件
      - name: 生成.config文件
        run: |
          cd openwrt/
          # 使用expect脚本模拟menuconfig
          cat << 'EOF' > config.expect
          #!/usr/bin/expect
          set timeout -1
          spawn make menuconfig
          expect "Target System"
          send "\r"
          expect {
            "MediaTek MT7621" {
              # CR6608配置
              send "\r"
              expect "Target Profile"
              send "\r"
              expect "Xiaomi Mi Router CR6608"
              send "\r"
            }
            "MediaTek Filogic" {
              # WR30U配置
              send "\r"
              expect "Target Profile"
              send "\r"
              expect {
                "Xiaomi Mi Router WR30U (stock layout)" { send "\r" }
                "Xiaomi Mi Router WR30U (OpenWrt U-Boot layout)" { send "\r" }
                "Xiaomi Mi Router WR30U (112M UBI with NMBM-Enabled layout)" { send "\r" }
              }
            }
          }
          expect "Save"
          send "\r"
          expect "Save"
          send "\r"
          expect eof
          EOF
          chmod +x config.expect
          ./config.expect
          mv .config ${GITHUB_WORKSPACE}/${{ env.CONFIG_DIR }}/config

      # 步骤7：加载自定义配置
      - name: 加载自定义配置
        run: |
          # 复制文件和配置
          [[ -d "files" ]] && mv -f files openwrt/files
          [[ -e "${{ env.CONFIG_DIR }}/config" ]] && cp -f ${{ env.CONFIG_DIR }}/config openwrt/.config
          chmod +x ${{ env.DIY_P2_SH }}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${{ env.DIY_P2_SH }}

      # 步骤8：下载依赖包
      - name: 下载依赖包
        id: package
        run: |
          cd openwrt/
          make defconfig
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      # 步骤9：编译固件
      - name: 编译固件
        id: compile
        run: |
          cd openwrt/
          make -j$(($(nproc) + 1)) V=s || make -j1 V=s
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤10：整理输出文件
      - name: 整理输出文件
        id: clean
        if: steps.compile.outputs.status == 'success'
        run: |
          cd openwrt/
          mkdir output
          # 只复制需要的固件文件
          find bin/targets/*/* -name "*.ubi" -o -name "*.bin" -o -name "*.fip" -o -name "*.itb" | xargs -I {} cp {} output/
          cp -f .config output/config
          # 生成sha256sum
          cd output/
          for file in *; do [[ ! -d "${file}" ]] && sha256sum "${file}" >"${file}.sha"; done
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤11：上传固件到Release
      - name: 上传固件到Release
        uses: ncipollo/release-action@v1
        if: steps.clean.outputs.status == 'success'
        with:
          tag: ${{ steps.codes.outputs.build_tag }}
          artifacts: openwrt/output/*
          allowUpdates: true
          token: ${{ secrets.GH_TOKEN }}
          body: |
            ### 固件信息
            - 默认IP: 192.168.1.1
            - 默认用户名: root
            - 默认密码: password
            - 默认WiFi名称: OpenWrt
            - 默认WiFi密码: 无
