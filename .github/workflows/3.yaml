#============================================================================================
# 描述: 用于编译Xiaomi Mi Router系列及相关设备的OpenWrt/ImmortalWrt固件
#============================================================================================

name: 编译Xiaomi Mi Router OpenWrt固件

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "选择固件源码分支"
        required: false
        default: "openwrt-main"
        type: choice
        options:
          - openwrt-main
          - immortalwrt-master
          - all
      openwrt_board:
        description: "选择目标设备"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - xiaomi_wr30u_stock
          - xiaomi_wr30u_openwrt_uboot
          - xiaomi_wr30u_112m_ubi_nmbm
          - xiaomi_cr6608
      openwrt_version:
        description: "指定版本号(为空使用最新版)"
        required: false
        default: ""
        type: string

env:
  FEEDS_CONF: config/${{ inputs.source_branch }}/feeds.conf.default
  CONFIG_FILE: config/${{ inputs.source_branch }}/config
  DIY_P1_SH: config/${{ inputs.source_branch }}/diy-part1.sh
  DIY_P2_SH: config/${{ inputs.source_branch }}/diy-part2.sh
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      # 步骤1: 检出代码仓库
      - name: Checkout
        uses: actions/checkout@v3

      # 步骤2: 初始化编译环境
      - name: 初始化编译环境
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 清理Docker镜像
          # docker rmi `docker images -q`
          # 清理不必要的工具目录
          # [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          # sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          # 更新软件源并安装依赖
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget
          # 安装menuconfig所需依赖
          sudo apt install -y libncurses-dev
          sudo systemctl daemon-reload
          sudo apt autoremove -y --purge
          sudo apt clean
          sudo mkdir -p /workdir
          sudo chown ${USER}:${GROUPS} /workdir
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤3: 克隆源码
      - name: 克隆源码 [ ${{ inputs.source_branch }} ]
        id: codes
        working-directory: /workdir
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          # 根据输入选择源码仓库和分支
          if [[ "${{ inputs.source_branch }}" == "openwrt-main" ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="openwrt"
          elif [[ "${{ inputs.source_branch }}" == "immortalwrt-master" ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              TAGS_NAME="immortalwrt"
          elif [[ "${{ inputs.source_branch }}" == "all" ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="all"
          else
              echo "未知的源码仓库"
              exit 1
          fi

          # 如果指定了版本，使用指定版本
          if [[ -n "${{ inputs.openwrt_version }}" ]]; then
              REPO_BRANCH="${{ inputs.openwrt_version }}"
          fi

          # 克隆源码
          git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
          ln -sf /workdir/openwrt ${GITHUB_WORKSPACE}/openwrt
          echo "build_tag=OpenWrt_${TAGS_NAME}_$(date +'%Y.%m')" >> ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤4: 加载自定义feeds
      - name: 加载自定义feeds
        run: |
          [[ -f "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
          chmod +x ${DIY_P1_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P1_SH}

      # 步骤5: 更新feeds
      - name: 更新feeds
        run: cd openwrt/ && ./scripts/feeds update -a

      # 步骤6: 安装feeds
      - name: 安装feeds
        run: cd openwrt/ && ./scripts/feeds install -a

      # 步骤7: 生成设备配置文件
      - name: 生成设备配置文件
        run: |
          cd openwrt/
          # 创建临时的.config种子文件以设置目标设备
          case "${{ inputs.openwrt_board }}" in
            "xiaomi_wr30u_stock")
              echo "CONFIG_TARGET_mediatek=y" > .config
              echo "CONFIG_TARGET_mediatek_filogic=y" >> .config
              echo "CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_wr30u-stock=y" >> .config
              ;;
            "xiaomi_wr30u_openwrt_uboot")
              echo "CONFIG_TARGET_mediatek=y" > .config
              echo "CONFIG_TARGET_mediatek_filogic=y" >> .config
              echo "CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_wr30u-ubootmod=y" >> .config
              ;;
            "xiaomi_wr30u_112m_ubi_nmbm")
              echo "CONFIG_TARGET_mediatek=y" > .config
              echo "CONFIG_TARGET_mediatek_filogic=y" >> .config
              echo "CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_wr30u-112m-ubi-nmbm=y" >> .config
              ;;
            "xiaomi_cr6608")
              echo "CONFIG_TARGET_mediatek=y" > .config
              echo "CONFIG_TARGET_mediatek_filogic=y" >> .config
              echo "CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_cr6608=y" >> .config
              ;;
            "all")
              echo "CONFIG_TARGET_mediatek=y" > .config
              echo "CONFIG_TARGET_mediatek_filogic=y" >> .config
              echo "CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_wr30u-stock=y" >> .config
              echo "CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_wr30u-ubootmod=y" >> .config
              echo "CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_wr30u-112m-ubi-nmbm=y" >> .config
              echo "CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_cr6608=y" >> .config
              ;;
          esac
          # 运行make defconfig以扩展配置
          make defconfig
          # 使用expect脚本模拟make menuconfig并直接保存
          sudo apt install -y expect
          cat > menuconfig.exp << 'EOF'
          spawn make menuconfig
          expect eof
          send "\r"
          expect eof
          EOF
          expect menuconfig.exp
          # 清理临时脚本
          rm menuconfig.exp
          # 确保.config文件生成
          if [ ! -f .config ]; then
            echo "Error: .config file not generated"
            exit 1
          fi

      # 步骤8: 下载软件包
      - name: 下载软件包
        id: package
        run: |
          cd openwrt/
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      # 步骤9: 编译固件
      - name: 编译固件
        id: compile
        run: |
          cd openwrt/
          make -j$(($(nproc) + 1)) V=s || make -j1 V=s
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤10: 整理输出文件
      - name: 整理输出文件
        id: clean
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        run: |
          cd openwrt/
          mkdir output
          # 只输出.ubi/.bin/.fip/.itb文件
          find bin/targets/*/* -type f \( -name "*.ubi" -o -name "*.bin" -o -name "*.fip" -o -name "*.itb" \) -exec cp {} output/ \;
          cp -f .config output/config
          # 生成sha256校验文件
          cd output/
          for file in *; do [[ ! -d "${file}" ]] && sha256sum "${file}" >"${file}.sha"; done
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤11: 上传固件到Release
      - name: 上传固件到Release
        uses: ncipollo/release-action@main
        if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
        with:
          tag: ${{ steps.codes.outputs.build_tag }}
          artifacts: openwrt/output/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}
          body: |
            ### 固件信息
            - 默认IP: 192.168.1.1
            - 默认用户名: root
            - 默认密码: password
            - 默认WIFI名称: OpenWrt
            - 默认WIFI密码: 无
            ### 安装到EMMC
            - 登录OpenWrt → 系统 → 安装OpenWrt
            ### 固件校验
            - sha256sum
