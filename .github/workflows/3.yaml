#============================================================================================
# 描述: 编译 Xiaomi Mi Router WR30U、CR6608 等设备的 OpenWrt/ImmortalWrt 固件
#============================================================================================

name: 编译小米路由器固件

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "选择固件分支"
        required: false
        default: "openwrt-main"
        type: choice
        options:
          - openwrt-main
          - immortalwrt-master
          - all
      openwrt_board:
        description: "选择设备型号"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - xiaomi_wr30u_stock
          - xiaomi_wr30u_openwrt_uboot
          - xiaomi_wr30u_112m_ubi_nmbm
          - xiaomi_cr6608
      openwrt_version:
        description: "指定固件版本 (留空使用最新版本)"
        required: false
        default: ""

env:
  FEEDS_CONF: config/${{ inputs.source_branch }}/feeds.conf.default
  CONFIG_FILE: config/${{ inputs.source_branch }}/${{ inputs.openwrt_board }}.config
  DIY_P1_SH: config/${{ inputs.source_branch }}/diy-part1.sh
  DIY_P2_SH: config/${{ inputs.source_branch }}/diy-part2.sh
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-24.04 # 使用 Ubuntu 24.04 LTS 编译

    steps:
      # 步骤1: 检出代码仓库
      - name: 检出代码
        uses: actions/checkout@v4

      # 步骤2: 初始化编译环境
      - name: 初始化环境
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 清理 Docker 镜像
          # docker rmi `docker images -q` 2>/dev/null || true
          # 清理不必要的工具和目录
          # sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          # 更新软件源并安装依赖
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libncursesw5-dev \
            ncurses-term python3-setuptools rsync swig unzip zlib1g-dev file wget
          # 清理 apt 缓存
          sudo apt autoremove -y --purge
          sudo apt clean
          # 创建工作目录
          sudo mkdir -p /workdir
          sudo chown ${USER}:${GROUPS} /workdir
          # 设置时区
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤3: 克隆固件源码
      - name: 克隆源码 [ ${{ inputs.source_branch }} ]
        id: codes
        working-directory: /workdir
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          # 根据输入选择源码仓库和分支
          if [[ "${{ inputs.source_branch }}" == "openwrt-main" || "${{ inputs.source_branch }}" == "all" ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="openwrt"
          elif [[ "${{ inputs.source_branch }}" == "immortalwrt-master" || "${{ inputs.source_branch }}" == "all" ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              TAGS_NAME="immortalwrt"
          else
              echo "未知的源码仓库"
              exit 1
          fi

          # 如果指定了版本，使用指定的 tag 或 commit
          if [[ -n "${{ inputs.openwrt_version }}" ]]; then
              git clone -q --single-branch --depth=1 ${REPO_URL} openwrt
              cd openwrt
              git checkout ${{ inputs.openwrt_version }}
          else
              git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
          fi

          # 创建软链接到工作区
          ln -sf /workdir/openwrt ${GITHUB_WORKSPACE}/openwrt
          # 设置编译标签
          echo "build_tag=${TAGS_NAME}_${{ inputs.openwrt_board }}_$(date +%Y.%m)" >> ${GITHUB_OUTPUT}
          echo -e "REPO_URL: [ ${REPO_URL} ]\nREPO_BRANCH: [ ${REPO_BRANCH} ]\nTAGS_NAME: [ ${TAGS_NAME} ]"
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤4: 加载自定义 feeds
      - name: 加载自定义 feeds
        run: |
          [[ -f "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
          chmod +x ${DIY_P1_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P1_SH}

      # 步骤5: 更新 feeds
      - name: 更新 feeds
        run: cd openwrt/ && ./scripts/feeds update -a

      # 步骤6: 安装 feeds
      - name: 安装 feeds
        run: cd openwrt/ && ./scripts/feeds install -a

      # 步骤7: 生成 .config 文件
      - name: 生成配置文件
        run: |
          cd openwrt/
          # 使用 make menuconfig 生成 .config 文件
          echo "正在为设备 ${{ inputs.openwrt_board }} 生成配置文件..."
          make menuconfig
          # 确保保存 .config 文件
          cp .config ${GITHUB_WORKSPACE}/${CONFIG_FILE}
          # 加载自定义配置
          [[ -e "${CONFIG_FILE}" ]] && cp -f ${CONFIG_FILE} .config
          chmod +x ${DIY_P2_SH}
          ${GITHUB_WORKSPACE}/${DIY_P2_SH}

      # 步骤8: 下载软件包
      - name: 下载软件包
        id: package
        run: |
          cd openwrt/
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      # 步骤9: 编译固件
      - name: 编译固件
        id: compile
        run: |
          cd openwrt/
          echo -e "使用 $(nproc) 线程编译"
          make -j$(($(nproc) + 1)) V=s || make -j1 V=s
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤10: 清理并整理输出文件
      - name: 整理输出文件
        id: clean
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        run: |
          cd openwrt/
          mkdir -p output
          # 只输出 .ubi、.bin、.fip、.itb 文件
          find bin/targets/*/* -type f \( -name "*.ubi" -o -name "*.bin" -o -name "*.fip" -o -name "*.itb" \) -exec cp {} output/ \;
          cp -f .config output/config
          # 生成 sha256sum 校验文件
          cd output/
          for file in *; do [[ ! -d "${file}" ]] && sha256sum "${file}" >"${file}.sha"; done
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      # 步骤11: 上传固件到 Release
      - name: 上传固件到 Release
        uses: ncipollo/release-action@v1
        if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
        with:
          tag: ${{ steps.codes.outputs.build_tag }}
          artifacts: openwrt/output/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}
          body: |
            ### 固件信息
            - 默认 IP: 192.168.1.1
            - 默认用户名: root
            - 默认密码: password
            - 默认 WiFi 名称: OpenWrt
            - 默认 WiFi 密码: 无
            ### 安装到 EMMC
            - 登录 OpenWrt → 系统 → 安装 OpenWrt
            ### 固件校验
            - sha256sum
